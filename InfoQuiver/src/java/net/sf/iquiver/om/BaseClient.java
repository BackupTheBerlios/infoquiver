package net.sf.iquiver.om;


import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Jul 06 01:21:59 CEST 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Client
 */
public abstract class BaseClient extends BaseObject
{
    /** The Peer class */
    private static final ClientPeer peer =
        new ClientPeer();

        
    /** The value for the clientId field */
    private int clientId;
      
    /** The value for the clientName field */
    private String clientName;
      
    /** The value for the addressId field */
    private long addressId;
  
    
    /**
     * Get the ClientId
     *
     * @return int
     */
    public int getClientId()
    {
        return clientId;
    }

                                              
    /**
     * Set the value of ClientId
     *
     * @param v new value
     */
    public void setClientId(int v) throws TorqueException
    {
    
                  if (this.clientId != v)
              {
            this.clientId = v;
            setModified(true);
        }
    
          
                                  
        // update associated User
        if (collUsers != null)
        {
            for (int i = 0; i < collUsers.size(); i++)
            {
                ((User) collUsers.get(i))
                    .setClientId(v);
            }
        }
                                          
        // update associated ClientContentSourceLnk
        if (collClientContentSourceLnks != null)
        {
            for (int i = 0; i < collClientContentSourceLnks.size(); i++)
            {
                ((ClientContentSourceLnk) collClientContentSourceLnks.get(i))
                    .setClientId(v);
            }
        }
                                          
        // update associated UserGroup
        if (collUserGroups != null)
        {
            for (int i = 0; i < collUserGroups.size(); i++)
            {
                ((UserGroup) collUserGroups.get(i))
                    .setClientId(v);
            }
        }
                                          
        // update associated UserGroupClientLnk
        if (collUserGroupClientLnks != null)
        {
            for (int i = 0; i < collUserGroupClientLnks.size(); i++)
            {
                ((UserGroupClientLnk) collUserGroupClientLnks.get(i))
                    .setClientId(v);
            }
        }
                                          
        // update associated ClientTransportLnk
        if (collClientTransportLnks != null)
        {
            for (int i = 0; i < collClientTransportLnks.size(); i++)
            {
                ((ClientTransportLnk) collClientTransportLnks.get(i))
                    .setClientId(v);
            }
        }
                                          
        // update associated ClientContentLnk
        if (collClientContentLnks != null)
        {
            for (int i = 0; i < collClientContentLnks.size(); i++)
            {
                ((ClientContentLnk) collClientContentLnks.get(i))
                    .setClientId(v);
            }
        }
                      }
  
    /**
     * Get the ClientName
     *
     * @return String
     */
    public String getClientName()
    {
        return clientName;
    }

                        
    /**
     * Set the value of ClientName
     *
     * @param v new value
     */
    public void setClientName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.clientName, v))
              {
            this.clientName = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AddressId
     *
     * @return long
     */
    public long getAddressId()
    {
        return addressId;
    }

                              
    /**
     * Set the value of AddressId
     *
     * @param v new value
     */
    public void setAddressId(long v) throws TorqueException
    {
    
                  if (this.addressId != v)
              {
            this.addressId = v;
            setModified(true);
        }
    
                          
                if (aAddress != null && !(aAddress.getAddressId() == v))
                {
            aAddress = null;
        }
      
              }
  
      
    
                  
    
        private Address aAddress;

    /**
     * Declares an association between this object and a Address object
     *
     * @param v Address
     * @throws TorqueException
     */
    public void setAddress(Address v) throws TorqueException
    {
            if (v == null)
        {
                    setAddressId(0);
                  }
        else
        {
            setAddressId(v.getAddressId());
        }
                aAddress = v;
    }

                                            
    /**
     * Get the associated Address object
     *
     * @return the associated Address object
     * @throws TorqueException
     */
    public Address getAddress() throws TorqueException
    {
        if (aAddress == null && (this.addressId > 0))
        {
                          aAddress = AddressPeer.retrieveByPK(SimpleKey.keyFor(this.addressId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Address obj = AddressPeer.retrieveByPK(this.addressId);
               obj.addClients(this);
            */
        }
        return aAddress;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
           */
    public void setAddressKey(ObjectKey key) throws TorqueException
    {
      
                        setAddressId(((NumberKey) key).longValue());
                  }
       
                                
            
    /**
     * Collection to store aggregation of collUsers
     */
    protected List collUsers;

    /**
     * Temporary storage of collUsers to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUsers()
    {
        if (collUsers == null)
        {
            collUsers = new ArrayList();
        }
    }

    /**
     * Method called to associate a User object to this object
     * through the User foreign key attribute
     *
     * @param l User
     * @throws TorqueException
     */
    public void addUser(User l) throws TorqueException
    {
        getUsers().add(l);
        l.setClient((Client) this);
    }

    /**
     * The criteria used to select the current contents of collUsers
     */
    private Criteria lastUsersCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUsers(new Criteria())
     *
     * @throws TorqueException
     */
    public List getUsers() throws TorqueException
    {
        if (collUsers == null)
        {
            collUsers = getUsers(new Criteria(10));
        }
        return collUsers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client has previously
     * been saved, it will retrieve related Users from storage.
     * If this Client is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getUsers(Criteria criteria) throws TorqueException
    {
        if (collUsers == null)
        {
            if (isNew())
            {
               collUsers = new ArrayList();
            }
            else
            {
                      criteria.add(UserPeer.CLIENT_ID, getClientId() );
                      collUsers = UserPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(UserPeer.CLIENT_ID, getClientId());
                      if (!lastUsersCriteria.equals(criteria))
                {
                    collUsers = UserPeer.doSelect(criteria);
                }
            }
        }
        lastUsersCriteria = criteria;

        return collUsers;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUsers(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUsers(Connection con) throws TorqueException
    {
        if (collUsers == null)
        {
            collUsers = getUsers(new Criteria(10), con);
        }
        return collUsers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client has previously
     * been saved, it will retrieve related Users from storage.
     * If this Client is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUsers(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collUsers == null)
        {
            if (isNew())
            {
               collUsers = new ArrayList();
            }
            else
            {
                       criteria.add(UserPeer.CLIENT_ID, getClientId());
                       collUsers = UserPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(UserPeer.CLIENT_ID, getClientId());
                       if (!lastUsersCriteria.equals(criteria))
                 {
                     collUsers = UserPeer.doSelect(criteria, con);
                 }
             }
         }
         lastUsersCriteria = criteria;

         return collUsers;
     }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client is new, it will return
     * an empty collection; or if this Client has previously
     * been saved, it will retrieve related Users from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Client.
     */
    protected List getUsersJoinClient(Criteria criteria)
        throws TorqueException
    {
        if (collUsers == null)
        {
            if (isNew())
            {
               collUsers = new ArrayList();
            }
            else
            {
                            criteria.add(UserPeer.CLIENT_ID, getClientId());
                            collUsers = UserPeer.doSelectJoinClient(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(UserPeer.CLIENT_ID, getClientId());
                        if (!lastUsersCriteria.equals(criteria))
            {
                collUsers = UserPeer.doSelectJoinClient(criteria);
            }
        }
        lastUsersCriteria = criteria;

        return collUsers;
    }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client is new, it will return
     * an empty collection; or if this Client has previously
     * been saved, it will retrieve related Users from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Client.
     */
    protected List getUsersJoinAddress(Criteria criteria)
        throws TorqueException
    {
        if (collUsers == null)
        {
            if (isNew())
            {
               collUsers = new ArrayList();
            }
            else
            {
                            criteria.add(UserPeer.CLIENT_ID, getClientId());
                            collUsers = UserPeer.doSelectJoinAddress(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(UserPeer.CLIENT_ID, getClientId());
                        if (!lastUsersCriteria.equals(criteria))
            {
                collUsers = UserPeer.doSelectJoinAddress(criteria);
            }
        }
        lastUsersCriteria = criteria;

        return collUsers;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collClientContentSourceLnks
     */
    protected List collClientContentSourceLnks;

    /**
     * Temporary storage of collClientContentSourceLnks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initClientContentSourceLnks()
    {
        if (collClientContentSourceLnks == null)
        {
            collClientContentSourceLnks = new ArrayList();
        }
    }

    /**
     * Method called to associate a ClientContentSourceLnk object to this object
     * through the ClientContentSourceLnk foreign key attribute
     *
     * @param l ClientContentSourceLnk
     * @throws TorqueException
     */
    public void addClientContentSourceLnk(ClientContentSourceLnk l) throws TorqueException
    {
        getClientContentSourceLnks().add(l);
        l.setClient((Client) this);
    }

    /**
     * The criteria used to select the current contents of collClientContentSourceLnks
     */
    private Criteria lastClientContentSourceLnksCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getClientContentSourceLnks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getClientContentSourceLnks() throws TorqueException
    {
        if (collClientContentSourceLnks == null)
        {
            collClientContentSourceLnks = getClientContentSourceLnks(new Criteria(10));
        }
        return collClientContentSourceLnks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client has previously
     * been saved, it will retrieve related ClientContentSourceLnks from storage.
     * If this Client is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getClientContentSourceLnks(Criteria criteria) throws TorqueException
    {
        if (collClientContentSourceLnks == null)
        {
            if (isNew())
            {
               collClientContentSourceLnks = new ArrayList();
            }
            else
            {
                      criteria.add(ClientContentSourceLnkPeer.CLIENT_ID, getClientId() );
                      collClientContentSourceLnks = ClientContentSourceLnkPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(ClientContentSourceLnkPeer.CLIENT_ID, getClientId());
                      if (!lastClientContentSourceLnksCriteria.equals(criteria))
                {
                    collClientContentSourceLnks = ClientContentSourceLnkPeer.doSelect(criteria);
                }
            }
        }
        lastClientContentSourceLnksCriteria = criteria;

        return collClientContentSourceLnks;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getClientContentSourceLnks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getClientContentSourceLnks(Connection con) throws TorqueException
    {
        if (collClientContentSourceLnks == null)
        {
            collClientContentSourceLnks = getClientContentSourceLnks(new Criteria(10), con);
        }
        return collClientContentSourceLnks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client has previously
     * been saved, it will retrieve related ClientContentSourceLnks from storage.
     * If this Client is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getClientContentSourceLnks(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collClientContentSourceLnks == null)
        {
            if (isNew())
            {
               collClientContentSourceLnks = new ArrayList();
            }
            else
            {
                       criteria.add(ClientContentSourceLnkPeer.CLIENT_ID, getClientId());
                       collClientContentSourceLnks = ClientContentSourceLnkPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(ClientContentSourceLnkPeer.CLIENT_ID, getClientId());
                       if (!lastClientContentSourceLnksCriteria.equals(criteria))
                 {
                     collClientContentSourceLnks = ClientContentSourceLnkPeer.doSelect(criteria, con);
                 }
             }
         }
         lastClientContentSourceLnksCriteria = criteria;

         return collClientContentSourceLnks;
     }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client is new, it will return
     * an empty collection; or if this Client has previously
     * been saved, it will retrieve related ClientContentSourceLnks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Client.
     */
    protected List getClientContentSourceLnksJoinClient(Criteria criteria)
        throws TorqueException
    {
        if (collClientContentSourceLnks == null)
        {
            if (isNew())
            {
               collClientContentSourceLnks = new ArrayList();
            }
            else
            {
                            criteria.add(ClientContentSourceLnkPeer.CLIENT_ID, getClientId());
                            collClientContentSourceLnks = ClientContentSourceLnkPeer.doSelectJoinClient(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ClientContentSourceLnkPeer.CLIENT_ID, getClientId());
                        if (!lastClientContentSourceLnksCriteria.equals(criteria))
            {
                collClientContentSourceLnks = ClientContentSourceLnkPeer.doSelectJoinClient(criteria);
            }
        }
        lastClientContentSourceLnksCriteria = criteria;

        return collClientContentSourceLnks;
    }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client is new, it will return
     * an empty collection; or if this Client has previously
     * been saved, it will retrieve related ClientContentSourceLnks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Client.
     */
    protected List getClientContentSourceLnksJoinContentSource(Criteria criteria)
        throws TorqueException
    {
        if (collClientContentSourceLnks == null)
        {
            if (isNew())
            {
               collClientContentSourceLnks = new ArrayList();
            }
            else
            {
                            criteria.add(ClientContentSourceLnkPeer.CLIENT_ID, getClientId());
                            collClientContentSourceLnks = ClientContentSourceLnkPeer.doSelectJoinContentSource(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ClientContentSourceLnkPeer.CLIENT_ID, getClientId());
                        if (!lastClientContentSourceLnksCriteria.equals(criteria))
            {
                collClientContentSourceLnks = ClientContentSourceLnkPeer.doSelectJoinContentSource(criteria);
            }
        }
        lastClientContentSourceLnksCriteria = criteria;

        return collClientContentSourceLnks;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collUserGroups
     */
    protected List collUserGroups;

    /**
     * Temporary storage of collUserGroups to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUserGroups()
    {
        if (collUserGroups == null)
        {
            collUserGroups = new ArrayList();
        }
    }

    /**
     * Method called to associate a UserGroup object to this object
     * through the UserGroup foreign key attribute
     *
     * @param l UserGroup
     * @throws TorqueException
     */
    public void addUserGroup(UserGroup l) throws TorqueException
    {
        getUserGroups().add(l);
        l.setClient((Client) this);
    }

    /**
     * The criteria used to select the current contents of collUserGroups
     */
    private Criteria lastUserGroupsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUserGroups(new Criteria())
     *
     * @throws TorqueException
     */
    public List getUserGroups() throws TorqueException
    {
        if (collUserGroups == null)
        {
            collUserGroups = getUserGroups(new Criteria(10));
        }
        return collUserGroups;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client has previously
     * been saved, it will retrieve related UserGroups from storage.
     * If this Client is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getUserGroups(Criteria criteria) throws TorqueException
    {
        if (collUserGroups == null)
        {
            if (isNew())
            {
               collUserGroups = new ArrayList();
            }
            else
            {
                      criteria.add(UserGroupPeer.CLIENT_ID, getClientId() );
                      collUserGroups = UserGroupPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(UserGroupPeer.CLIENT_ID, getClientId());
                      if (!lastUserGroupsCriteria.equals(criteria))
                {
                    collUserGroups = UserGroupPeer.doSelect(criteria);
                }
            }
        }
        lastUserGroupsCriteria = criteria;

        return collUserGroups;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUserGroups(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUserGroups(Connection con) throws TorqueException
    {
        if (collUserGroups == null)
        {
            collUserGroups = getUserGroups(new Criteria(10), con);
        }
        return collUserGroups;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client has previously
     * been saved, it will retrieve related UserGroups from storage.
     * If this Client is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUserGroups(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collUserGroups == null)
        {
            if (isNew())
            {
               collUserGroups = new ArrayList();
            }
            else
            {
                       criteria.add(UserGroupPeer.CLIENT_ID, getClientId());
                       collUserGroups = UserGroupPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(UserGroupPeer.CLIENT_ID, getClientId());
                       if (!lastUserGroupsCriteria.equals(criteria))
                 {
                     collUserGroups = UserGroupPeer.doSelect(criteria, con);
                 }
             }
         }
         lastUserGroupsCriteria = criteria;

         return collUserGroups;
     }

                  
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client is new, it will return
     * an empty collection; or if this Client has previously
     * been saved, it will retrieve related UserGroups from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Client.
     */
    protected List getUserGroupsJoinClient(Criteria criteria)
        throws TorqueException
    {
        if (collUserGroups == null)
        {
            if (isNew())
            {
               collUserGroups = new ArrayList();
            }
            else
            {
                            criteria.add(UserGroupPeer.CLIENT_ID, getClientId());
                            collUserGroups = UserGroupPeer.doSelectJoinClient(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(UserGroupPeer.CLIENT_ID, getClientId());
                        if (!lastUserGroupsCriteria.equals(criteria))
            {
                collUserGroups = UserGroupPeer.doSelectJoinClient(criteria);
            }
        }
        lastUserGroupsCriteria = criteria;

        return collUserGroups;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collUserGroupClientLnks
     */
    protected List collUserGroupClientLnks;

    /**
     * Temporary storage of collUserGroupClientLnks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUserGroupClientLnks()
    {
        if (collUserGroupClientLnks == null)
        {
            collUserGroupClientLnks = new ArrayList();
        }
    }

    /**
     * Method called to associate a UserGroupClientLnk object to this object
     * through the UserGroupClientLnk foreign key attribute
     *
     * @param l UserGroupClientLnk
     * @throws TorqueException
     */
    public void addUserGroupClientLnk(UserGroupClientLnk l) throws TorqueException
    {
        getUserGroupClientLnks().add(l);
        l.setClient((Client) this);
    }

    /**
     * The criteria used to select the current contents of collUserGroupClientLnks
     */
    private Criteria lastUserGroupClientLnksCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUserGroupClientLnks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getUserGroupClientLnks() throws TorqueException
    {
        if (collUserGroupClientLnks == null)
        {
            collUserGroupClientLnks = getUserGroupClientLnks(new Criteria(10));
        }
        return collUserGroupClientLnks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client has previously
     * been saved, it will retrieve related UserGroupClientLnks from storage.
     * If this Client is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getUserGroupClientLnks(Criteria criteria) throws TorqueException
    {
        if (collUserGroupClientLnks == null)
        {
            if (isNew())
            {
               collUserGroupClientLnks = new ArrayList();
            }
            else
            {
                      criteria.add(UserGroupClientLnkPeer.CLIENT_ID, getClientId() );
                      collUserGroupClientLnks = UserGroupClientLnkPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(UserGroupClientLnkPeer.CLIENT_ID, getClientId());
                      if (!lastUserGroupClientLnksCriteria.equals(criteria))
                {
                    collUserGroupClientLnks = UserGroupClientLnkPeer.doSelect(criteria);
                }
            }
        }
        lastUserGroupClientLnksCriteria = criteria;

        return collUserGroupClientLnks;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUserGroupClientLnks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUserGroupClientLnks(Connection con) throws TorqueException
    {
        if (collUserGroupClientLnks == null)
        {
            collUserGroupClientLnks = getUserGroupClientLnks(new Criteria(10), con);
        }
        return collUserGroupClientLnks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client has previously
     * been saved, it will retrieve related UserGroupClientLnks from storage.
     * If this Client is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUserGroupClientLnks(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collUserGroupClientLnks == null)
        {
            if (isNew())
            {
               collUserGroupClientLnks = new ArrayList();
            }
            else
            {
                       criteria.add(UserGroupClientLnkPeer.CLIENT_ID, getClientId());
                       collUserGroupClientLnks = UserGroupClientLnkPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(UserGroupClientLnkPeer.CLIENT_ID, getClientId());
                       if (!lastUserGroupClientLnksCriteria.equals(criteria))
                 {
                     collUserGroupClientLnks = UserGroupClientLnkPeer.doSelect(criteria, con);
                 }
             }
         }
         lastUserGroupClientLnksCriteria = criteria;

         return collUserGroupClientLnks;
     }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client is new, it will return
     * an empty collection; or if this Client has previously
     * been saved, it will retrieve related UserGroupClientLnks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Client.
     */
    protected List getUserGroupClientLnksJoinClient(Criteria criteria)
        throws TorqueException
    {
        if (collUserGroupClientLnks == null)
        {
            if (isNew())
            {
               collUserGroupClientLnks = new ArrayList();
            }
            else
            {
                            criteria.add(UserGroupClientLnkPeer.CLIENT_ID, getClientId());
                            collUserGroupClientLnks = UserGroupClientLnkPeer.doSelectJoinClient(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(UserGroupClientLnkPeer.CLIENT_ID, getClientId());
                        if (!lastUserGroupClientLnksCriteria.equals(criteria))
            {
                collUserGroupClientLnks = UserGroupClientLnkPeer.doSelectJoinClient(criteria);
            }
        }
        lastUserGroupClientLnksCriteria = criteria;

        return collUserGroupClientLnks;
    }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client is new, it will return
     * an empty collection; or if this Client has previously
     * been saved, it will retrieve related UserGroupClientLnks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Client.
     */
    protected List getUserGroupClientLnksJoinUserGroup(Criteria criteria)
        throws TorqueException
    {
        if (collUserGroupClientLnks == null)
        {
            if (isNew())
            {
               collUserGroupClientLnks = new ArrayList();
            }
            else
            {
                            criteria.add(UserGroupClientLnkPeer.CLIENT_ID, getClientId());
                            collUserGroupClientLnks = UserGroupClientLnkPeer.doSelectJoinUserGroup(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(UserGroupClientLnkPeer.CLIENT_ID, getClientId());
                        if (!lastUserGroupClientLnksCriteria.equals(criteria))
            {
                collUserGroupClientLnks = UserGroupClientLnkPeer.doSelectJoinUserGroup(criteria);
            }
        }
        lastUserGroupClientLnksCriteria = criteria;

        return collUserGroupClientLnks;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collClientTransportLnks
     */
    protected List collClientTransportLnks;

    /**
     * Temporary storage of collClientTransportLnks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initClientTransportLnks()
    {
        if (collClientTransportLnks == null)
        {
            collClientTransportLnks = new ArrayList();
        }
    }

    /**
     * Method called to associate a ClientTransportLnk object to this object
     * through the ClientTransportLnk foreign key attribute
     *
     * @param l ClientTransportLnk
     * @throws TorqueException
     */
    public void addClientTransportLnk(ClientTransportLnk l) throws TorqueException
    {
        getClientTransportLnks().add(l);
        l.setClient((Client) this);
    }

    /**
     * The criteria used to select the current contents of collClientTransportLnks
     */
    private Criteria lastClientTransportLnksCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getClientTransportLnks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getClientTransportLnks() throws TorqueException
    {
        if (collClientTransportLnks == null)
        {
            collClientTransportLnks = getClientTransportLnks(new Criteria(10));
        }
        return collClientTransportLnks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client has previously
     * been saved, it will retrieve related ClientTransportLnks from storage.
     * If this Client is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getClientTransportLnks(Criteria criteria) throws TorqueException
    {
        if (collClientTransportLnks == null)
        {
            if (isNew())
            {
               collClientTransportLnks = new ArrayList();
            }
            else
            {
                      criteria.add(ClientTransportLnkPeer.CLIENT_ID, getClientId() );
                      collClientTransportLnks = ClientTransportLnkPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(ClientTransportLnkPeer.CLIENT_ID, getClientId());
                      if (!lastClientTransportLnksCriteria.equals(criteria))
                {
                    collClientTransportLnks = ClientTransportLnkPeer.doSelect(criteria);
                }
            }
        }
        lastClientTransportLnksCriteria = criteria;

        return collClientTransportLnks;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getClientTransportLnks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getClientTransportLnks(Connection con) throws TorqueException
    {
        if (collClientTransportLnks == null)
        {
            collClientTransportLnks = getClientTransportLnks(new Criteria(10), con);
        }
        return collClientTransportLnks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client has previously
     * been saved, it will retrieve related ClientTransportLnks from storage.
     * If this Client is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getClientTransportLnks(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collClientTransportLnks == null)
        {
            if (isNew())
            {
               collClientTransportLnks = new ArrayList();
            }
            else
            {
                       criteria.add(ClientTransportLnkPeer.CLIENT_ID, getClientId());
                       collClientTransportLnks = ClientTransportLnkPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(ClientTransportLnkPeer.CLIENT_ID, getClientId());
                       if (!lastClientTransportLnksCriteria.equals(criteria))
                 {
                     collClientTransportLnks = ClientTransportLnkPeer.doSelect(criteria, con);
                 }
             }
         }
         lastClientTransportLnksCriteria = criteria;

         return collClientTransportLnks;
     }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client is new, it will return
     * an empty collection; or if this Client has previously
     * been saved, it will retrieve related ClientTransportLnks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Client.
     */
    protected List getClientTransportLnksJoinClient(Criteria criteria)
        throws TorqueException
    {
        if (collClientTransportLnks == null)
        {
            if (isNew())
            {
               collClientTransportLnks = new ArrayList();
            }
            else
            {
                            criteria.add(ClientTransportLnkPeer.CLIENT_ID, getClientId());
                            collClientTransportLnks = ClientTransportLnkPeer.doSelectJoinClient(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ClientTransportLnkPeer.CLIENT_ID, getClientId());
                        if (!lastClientTransportLnksCriteria.equals(criteria))
            {
                collClientTransportLnks = ClientTransportLnkPeer.doSelectJoinClient(criteria);
            }
        }
        lastClientTransportLnksCriteria = criteria;

        return collClientTransportLnks;
    }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client is new, it will return
     * an empty collection; or if this Client has previously
     * been saved, it will retrieve related ClientTransportLnks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Client.
     */
    protected List getClientTransportLnksJoinTransport(Criteria criteria)
        throws TorqueException
    {
        if (collClientTransportLnks == null)
        {
            if (isNew())
            {
               collClientTransportLnks = new ArrayList();
            }
            else
            {
                            criteria.add(ClientTransportLnkPeer.CLIENT_ID, getClientId());
                            collClientTransportLnks = ClientTransportLnkPeer.doSelectJoinTransport(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ClientTransportLnkPeer.CLIENT_ID, getClientId());
                        if (!lastClientTransportLnksCriteria.equals(criteria))
            {
                collClientTransportLnks = ClientTransportLnkPeer.doSelectJoinTransport(criteria);
            }
        }
        lastClientTransportLnksCriteria = criteria;

        return collClientTransportLnks;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collClientContentLnks
     */
    protected List collClientContentLnks;

    /**
     * Temporary storage of collClientContentLnks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initClientContentLnks()
    {
        if (collClientContentLnks == null)
        {
            collClientContentLnks = new ArrayList();
        }
    }

    /**
     * Method called to associate a ClientContentLnk object to this object
     * through the ClientContentLnk foreign key attribute
     *
     * @param l ClientContentLnk
     * @throws TorqueException
     */
    public void addClientContentLnk(ClientContentLnk l) throws TorqueException
    {
        getClientContentLnks().add(l);
        l.setClient((Client) this);
    }

    /**
     * The criteria used to select the current contents of collClientContentLnks
     */
    private Criteria lastClientContentLnksCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getClientContentLnks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getClientContentLnks() throws TorqueException
    {
        if (collClientContentLnks == null)
        {
            collClientContentLnks = getClientContentLnks(new Criteria(10));
        }
        return collClientContentLnks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client has previously
     * been saved, it will retrieve related ClientContentLnks from storage.
     * If this Client is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getClientContentLnks(Criteria criteria) throws TorqueException
    {
        if (collClientContentLnks == null)
        {
            if (isNew())
            {
               collClientContentLnks = new ArrayList();
            }
            else
            {
                      criteria.add(ClientContentLnkPeer.CLIENT_ID, getClientId() );
                      collClientContentLnks = ClientContentLnkPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(ClientContentLnkPeer.CLIENT_ID, getClientId());
                      if (!lastClientContentLnksCriteria.equals(criteria))
                {
                    collClientContentLnks = ClientContentLnkPeer.doSelect(criteria);
                }
            }
        }
        lastClientContentLnksCriteria = criteria;

        return collClientContentLnks;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getClientContentLnks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getClientContentLnks(Connection con) throws TorqueException
    {
        if (collClientContentLnks == null)
        {
            collClientContentLnks = getClientContentLnks(new Criteria(10), con);
        }
        return collClientContentLnks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client has previously
     * been saved, it will retrieve related ClientContentLnks from storage.
     * If this Client is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getClientContentLnks(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collClientContentLnks == null)
        {
            if (isNew())
            {
               collClientContentLnks = new ArrayList();
            }
            else
            {
                       criteria.add(ClientContentLnkPeer.CLIENT_ID, getClientId());
                       collClientContentLnks = ClientContentLnkPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(ClientContentLnkPeer.CLIENT_ID, getClientId());
                       if (!lastClientContentLnksCriteria.equals(criteria))
                 {
                     collClientContentLnks = ClientContentLnkPeer.doSelect(criteria, con);
                 }
             }
         }
         lastClientContentLnksCriteria = criteria;

         return collClientContentLnks;
     }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client is new, it will return
     * an empty collection; or if this Client has previously
     * been saved, it will retrieve related ClientContentLnks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Client.
     */
    protected List getClientContentLnksJoinClient(Criteria criteria)
        throws TorqueException
    {
        if (collClientContentLnks == null)
        {
            if (isNew())
            {
               collClientContentLnks = new ArrayList();
            }
            else
            {
                            criteria.add(ClientContentLnkPeer.CLIENT_ID, getClientId());
                            collClientContentLnks = ClientContentLnkPeer.doSelectJoinClient(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ClientContentLnkPeer.CLIENT_ID, getClientId());
                        if (!lastClientContentLnksCriteria.equals(criteria))
            {
                collClientContentLnks = ClientContentLnkPeer.doSelectJoinClient(criteria);
            }
        }
        lastClientContentLnksCriteria = criteria;

        return collClientContentLnks;
    }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Client is new, it will return
     * an empty collection; or if this Client has previously
     * been saved, it will retrieve related ClientContentLnks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Client.
     */
    protected List getClientContentLnksJoinContent(Criteria criteria)
        throws TorqueException
    {
        if (collClientContentLnks == null)
        {
            if (isNew())
            {
               collClientContentLnks = new ArrayList();
            }
            else
            {
                            criteria.add(ClientContentLnkPeer.CLIENT_ID, getClientId());
                            collClientContentLnks = ClientContentLnkPeer.doSelectJoinContent(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ClientContentLnkPeer.CLIENT_ID, getClientId());
                        if (!lastClientContentLnksCriteria.equals(criteria))
            {
                collClientContentLnks = ClientContentLnkPeer.doSelectJoinContent(criteria);
            }
        }
        lastClientContentLnksCriteria = criteria;

        return collClientContentLnks;
    }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("ClientId");
              fieldNames.add("ClientName");
              fieldNames.add("AddressId");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("ClientId"))
        {
                return new Integer(getClientId());
            }
          if (name.equals("ClientName"))
        {
                return getClientName();
            }
          if (name.equals("AddressId"))
        {
                return new Long(getAddressId());
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ClientPeer.CLIENT_ID))
        {
                return new Integer(getClientId());
            }
          if (name.equals(ClientPeer.CLIENT_NAME))
        {
                return getClientName();
            }
          if (name.equals(ClientPeer.ADDRESS_ID))
        {
                return new Long(getAddressId());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getClientId());
            }
              if (pos == 1)
        {
                return getClientName();
            }
              if (pos == 2)
        {
                return new Long(getAddressId());
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ClientPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ClientPeer.doInsert((Client) this, con);
                    setNew(false);
                }
                else
                {
                    ClientPeer.doUpdate((Client) this, con);
                }
            }

                                      
                
            if (collUsers != null)
            {
                for (int i = 0; i < collUsers.size(); i++)
                {
                    ((User) collUsers.get(i)).save(con);
                }
            }
                                          
                
            if (collClientContentSourceLnks != null)
            {
                for (int i = 0; i < collClientContentSourceLnks.size(); i++)
                {
                    ((ClientContentSourceLnk) collClientContentSourceLnks.get(i)).save(con);
                }
            }
                                          
                
            if (collUserGroups != null)
            {
                for (int i = 0; i < collUserGroups.size(); i++)
                {
                    ((UserGroup) collUserGroups.get(i)).save(con);
                }
            }
                                          
                
            if (collUserGroupClientLnks != null)
            {
                for (int i = 0; i < collUserGroupClientLnks.size(); i++)
                {
                    ((UserGroupClientLnk) collUserGroupClientLnks.get(i)).save(con);
                }
            }
                                          
                
            if (collClientTransportLnks != null)
            {
                for (int i = 0; i < collClientTransportLnks.size(); i++)
                {
                    ((ClientTransportLnk) collClientTransportLnks.get(i)).save(con);
                }
            }
                                          
                
            if (collClientContentLnks != null)
            {
                for (int i = 0; i < collClientContentLnks.size(); i++)
                {
                    ((ClientContentLnk) collClientContentLnks.get(i)).save(con);
                }
            }
                          alreadyInSave = false;
        }
      }


                          
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  clientId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setClientId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setClientId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getClientId());
      }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Client copy() throws TorqueException
    {
        return copyInto(new Client());
    }
  
    protected Client copyInto(Client copyObj) throws TorqueException
    {
          copyObj.setClientId(clientId);
          copyObj.setClientName(clientName);
          copyObj.setAddressId(addressId);
  
                    copyObj.setClientId(0);
                        
                                      
                
        List v = getUsers();
        for (int i = 0; i < v.size(); i++)
        {
            User obj = (User) v.get(i);
            copyObj.addUser(obj.copy());
        }
                                                  
                
        v = getClientContentSourceLnks();
        for (int i = 0; i < v.size(); i++)
        {
            ClientContentSourceLnk obj = (ClientContentSourceLnk) v.get(i);
            copyObj.addClientContentSourceLnk(obj.copy());
        }
                                                  
                
        v = getUserGroups();
        for (int i = 0; i < v.size(); i++)
        {
            UserGroup obj = (UserGroup) v.get(i);
            copyObj.addUserGroup(obj.copy());
        }
                                                  
                
        v = getUserGroupClientLnks();
        for (int i = 0; i < v.size(); i++)
        {
            UserGroupClientLnk obj = (UserGroupClientLnk) v.get(i);
            copyObj.addUserGroupClientLnk(obj.copy());
        }
                                                  
                
        v = getClientTransportLnks();
        for (int i = 0; i < v.size(); i++)
        {
            ClientTransportLnk obj = (ClientTransportLnk) v.get(i);
            copyObj.addClientTransportLnk(obj.copy());
        }
                                                  
                
        v = getClientContentLnks();
        for (int i = 0; i < v.size(); i++)
        {
            ClientContentLnk obj = (ClientContentLnk) v.get(i);
            copyObj.addClientContentLnk(obj.copy());
        }
                    
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ClientPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Client:\n");
        str.append("ClientId = ")
           .append(getClientId())
           .append("\n");
        str.append("ClientName = ")
           .append(getClientName())
           .append("\n");
        str.append("AddressId = ")
           .append(getAddressId())
           .append("\n");
        return(str.toString());
    }
}
