package net.sf.iquiver.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Sat Apr 03 15:42:57 CEST 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Transport
 */
public abstract class BaseTransport extends BaseObject
{
    /** The Peer class */
    private static final TransportPeer peer =
        new TransportPeer();

        
    /** The value for the transportId field */
    private int transportId;
      
    /** The value for the transportName field */
    private String transportName;
      
    /** The value for the transportType field */
    private byte transportType;
      
    /** The value for the transportDesc field */
    private String transportDesc;
      
    /** The value for the transportStartTimeout field */
    private Date transportStartTimeout;
      
    /** The value for the transportImplementation field */
    private String transportImplementation;
      
    /** The value for the isAuthentificationRequired field */
    private boolean isAuthentificationRequired;
  
    
    /**
     * Get the TransportId
     *
     * @return int
     */
    public int getTransportId()
    {
        return transportId;
    }

                                              
    /**
     * Set the value of TransportId
     *
     * @param v new value
     */
    public void setTransportId(int v) throws TorqueException
    {
    
                  if (this.transportId != v)
              {
            this.transportId = v;
            setModified(true);
        }
    
          
                                  
        // update associated TransportAttribute
        if (collTransportAttributes != null)
        {
            for (int i = 0; i < collTransportAttributes.size(); i++)
            {
                ((TransportAttribute) collTransportAttributes.get(i))
                    .setTransportId(v);
            }
        }
                                          
        // update associated ClientTransportLnk
        if (collClientTransportLnks != null)
        {
            for (int i = 0; i < collClientTransportLnks.size(); i++)
            {
                ((ClientTransportLnk) collClientTransportLnks.get(i))
                    .setTransportId(v);
            }
        }
                                          
        // update associated ContentSource
        if (collContentSources != null)
        {
            for (int i = 0; i < collContentSources.size(); i++)
            {
                ((ContentSource) collContentSources.get(i))
                    .setTransportId(v);
            }
        }
                      }
  
    /**
     * Get the TransportName
     *
     * @return String
     */
    public String getTransportName()
    {
        return transportName;
    }

                        
    /**
     * Set the value of TransportName
     *
     * @param v new value
     */
    public void setTransportName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.transportName, v))
              {
            this.transportName = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the TransportType
     *
     * @return byte
     */
    public byte getTransportType()
    {
        return transportType;
    }

                        
    /**
     * Set the value of TransportType
     *
     * @param v new value
     */
    public void setTransportType(byte v) 
    {
    
                  if (this.transportType != v)
              {
            this.transportType = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the TransportDesc
     *
     * @return String
     */
    public String getTransportDesc()
    {
        return transportDesc;
    }

                        
    /**
     * Set the value of TransportDesc
     *
     * @param v new value
     */
    public void setTransportDesc(String v) 
    {
    
                  if (!ObjectUtils.equals(this.transportDesc, v))
              {
            this.transportDesc = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the TransportStartTimeout
     *
     * @return Date
     */
    public Date getTransportStartTimeout()
    {
        return transportStartTimeout;
    }

                        
    /**
     * Set the value of TransportStartTimeout
     *
     * @param v new value
     */
    public void setTransportStartTimeout(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.transportStartTimeout, v))
              {
            this.transportStartTimeout = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the TransportImplementation
     *
     * @return String
     */
    public String getTransportImplementation()
    {
        return transportImplementation;
    }

                        
    /**
     * Set the value of TransportImplementation
     *
     * @param v new value
     */
    public void setTransportImplementation(String v) 
    {
    
                  if (!ObjectUtils.equals(this.transportImplementation, v))
              {
            this.transportImplementation = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the IsAuthentificationRequired
     *
     * @return boolean
     */
    public boolean getIsAuthentificationRequired()
    {
        return isAuthentificationRequired;
    }

                        
    /**
     * Set the value of IsAuthentificationRequired
     *
     * @param v new value
     */
    public void setIsAuthentificationRequired(boolean v) 
    {
    
                  if (this.isAuthentificationRequired != v)
              {
            this.isAuthentificationRequired = v;
            setModified(true);
        }
    
          
              }
  
         
                                
            
    /**
     * Collection to store aggregation of collTransportAttributes
     */
    protected List collTransportAttributes;

    /**
     * Temporary storage of collTransportAttributes to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTransportAttributes()
    {
        if (collTransportAttributes == null)
        {
            collTransportAttributes = new ArrayList();
        }
    }

    /**
     * Method called to associate a TransportAttribute object to this object
     * through the TransportAttribute foreign key attribute
     *
     * @param l TransportAttribute
     * @throws TorqueException
     */
    public void addTransportAttribute(TransportAttribute l) throws TorqueException
    {
        getTransportAttributes().add(l);
        l.setTransport((Transport) this);
    }

    /**
     * The criteria used to select the current contents of collTransportAttributes
     */
    private Criteria lastTransportAttributesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTransportAttributes(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTransportAttributes() throws TorqueException
    {
        if (collTransportAttributes == null)
        {
            collTransportAttributes = getTransportAttributes(new Criteria(10));
        }
        return collTransportAttributes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Transport has previously
     * been saved, it will retrieve related TransportAttributes from storage.
     * If this Transport is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTransportAttributes(Criteria criteria) throws TorqueException
    {
        if (collTransportAttributes == null)
        {
            if (isNew())
            {
               collTransportAttributes = new ArrayList();
            }
            else
            {
                      criteria.add(TransportAttributePeer.TRANSPORT_ID, getTransportId() );
                      collTransportAttributes = TransportAttributePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(TransportAttributePeer.TRANSPORT_ID, getTransportId());
                      if (!lastTransportAttributesCriteria.equals(criteria))
                {
                    collTransportAttributes = TransportAttributePeer.doSelect(criteria);
                }
            }
        }
        lastTransportAttributesCriteria = criteria;

        return collTransportAttributes;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTransportAttributes(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTransportAttributes(Connection con) throws TorqueException
    {
        if (collTransportAttributes == null)
        {
            collTransportAttributes = getTransportAttributes(new Criteria(10), con);
        }
        return collTransportAttributes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Transport has previously
     * been saved, it will retrieve related TransportAttributes from storage.
     * If this Transport is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTransportAttributes(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collTransportAttributes == null)
        {
            if (isNew())
            {
               collTransportAttributes = new ArrayList();
            }
            else
            {
                       criteria.add(TransportAttributePeer.TRANSPORT_ID, getTransportId());
                       collTransportAttributes = TransportAttributePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(TransportAttributePeer.TRANSPORT_ID, getTransportId());
                       if (!lastTransportAttributesCriteria.equals(criteria))
                 {
                     collTransportAttributes = TransportAttributePeer.doSelect(criteria, con);
                 }
             }
         }
         lastTransportAttributesCriteria = criteria;

         return collTransportAttributes;
     }

                  
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Transport is new, it will return
     * an empty collection; or if this Transport has previously
     * been saved, it will retrieve related TransportAttributes from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Transport.
     */
    protected List getTransportAttributesJoinTransport(Criteria criteria)
        throws TorqueException
    {
        if (collTransportAttributes == null)
        {
            if (isNew())
            {
               collTransportAttributes = new ArrayList();
            }
            else
            {
                            criteria.add(TransportAttributePeer.TRANSPORT_ID, getTransportId());
                            collTransportAttributes = TransportAttributePeer.doSelectJoinTransport(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(TransportAttributePeer.TRANSPORT_ID, getTransportId());
                        if (!lastTransportAttributesCriteria.equals(criteria))
            {
                collTransportAttributes = TransportAttributePeer.doSelectJoinTransport(criteria);
            }
        }
        lastTransportAttributesCriteria = criteria;

        return collTransportAttributes;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collClientTransportLnks
     */
    protected List collClientTransportLnks;

    /**
     * Temporary storage of collClientTransportLnks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initClientTransportLnks()
    {
        if (collClientTransportLnks == null)
        {
            collClientTransportLnks = new ArrayList();
        }
    }

    /**
     * Method called to associate a ClientTransportLnk object to this object
     * through the ClientTransportLnk foreign key attribute
     *
     * @param l ClientTransportLnk
     * @throws TorqueException
     */
    public void addClientTransportLnk(ClientTransportLnk l) throws TorqueException
    {
        getClientTransportLnks().add(l);
        l.setTransport((Transport) this);
    }

    /**
     * The criteria used to select the current contents of collClientTransportLnks
     */
    private Criteria lastClientTransportLnksCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getClientTransportLnks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getClientTransportLnks() throws TorqueException
    {
        if (collClientTransportLnks == null)
        {
            collClientTransportLnks = getClientTransportLnks(new Criteria(10));
        }
        return collClientTransportLnks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Transport has previously
     * been saved, it will retrieve related ClientTransportLnks from storage.
     * If this Transport is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getClientTransportLnks(Criteria criteria) throws TorqueException
    {
        if (collClientTransportLnks == null)
        {
            if (isNew())
            {
               collClientTransportLnks = new ArrayList();
            }
            else
            {
                      criteria.add(ClientTransportLnkPeer.TRANSPORT_ID, getTransportId() );
                      collClientTransportLnks = ClientTransportLnkPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(ClientTransportLnkPeer.TRANSPORT_ID, getTransportId());
                      if (!lastClientTransportLnksCriteria.equals(criteria))
                {
                    collClientTransportLnks = ClientTransportLnkPeer.doSelect(criteria);
                }
            }
        }
        lastClientTransportLnksCriteria = criteria;

        return collClientTransportLnks;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getClientTransportLnks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getClientTransportLnks(Connection con) throws TorqueException
    {
        if (collClientTransportLnks == null)
        {
            collClientTransportLnks = getClientTransportLnks(new Criteria(10), con);
        }
        return collClientTransportLnks;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Transport has previously
     * been saved, it will retrieve related ClientTransportLnks from storage.
     * If this Transport is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getClientTransportLnks(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collClientTransportLnks == null)
        {
            if (isNew())
            {
               collClientTransportLnks = new ArrayList();
            }
            else
            {
                       criteria.add(ClientTransportLnkPeer.TRANSPORT_ID, getTransportId());
                       collClientTransportLnks = ClientTransportLnkPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(ClientTransportLnkPeer.TRANSPORT_ID, getTransportId());
                       if (!lastClientTransportLnksCriteria.equals(criteria))
                 {
                     collClientTransportLnks = ClientTransportLnkPeer.doSelect(criteria, con);
                 }
             }
         }
         lastClientTransportLnksCriteria = criteria;

         return collClientTransportLnks;
     }

                        
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Transport is new, it will return
     * an empty collection; or if this Transport has previously
     * been saved, it will retrieve related ClientTransportLnks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Transport.
     */
    protected List getClientTransportLnksJoinClient(Criteria criteria)
        throws TorqueException
    {
        if (collClientTransportLnks == null)
        {
            if (isNew())
            {
               collClientTransportLnks = new ArrayList();
            }
            else
            {
                            criteria.add(ClientTransportLnkPeer.TRANSPORT_ID, getTransportId());
                            collClientTransportLnks = ClientTransportLnkPeer.doSelectJoinClient(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ClientTransportLnkPeer.TRANSPORT_ID, getTransportId());
                        if (!lastClientTransportLnksCriteria.equals(criteria))
            {
                collClientTransportLnks = ClientTransportLnkPeer.doSelectJoinClient(criteria);
            }
        }
        lastClientTransportLnksCriteria = criteria;

        return collClientTransportLnks;
    }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Transport is new, it will return
     * an empty collection; or if this Transport has previously
     * been saved, it will retrieve related ClientTransportLnks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Transport.
     */
    protected List getClientTransportLnksJoinTransport(Criteria criteria)
        throws TorqueException
    {
        if (collClientTransportLnks == null)
        {
            if (isNew())
            {
               collClientTransportLnks = new ArrayList();
            }
            else
            {
                            criteria.add(ClientTransportLnkPeer.TRANSPORT_ID, getTransportId());
                            collClientTransportLnks = ClientTransportLnkPeer.doSelectJoinTransport(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ClientTransportLnkPeer.TRANSPORT_ID, getTransportId());
                        if (!lastClientTransportLnksCriteria.equals(criteria))
            {
                collClientTransportLnks = ClientTransportLnkPeer.doSelectJoinTransport(criteria);
            }
        }
        lastClientTransportLnksCriteria = criteria;

        return collClientTransportLnks;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collContentSources
     */
    protected List collContentSources;

    /**
     * Temporary storage of collContentSources to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initContentSources()
    {
        if (collContentSources == null)
        {
            collContentSources = new ArrayList();
        }
    }

    /**
     * Method called to associate a ContentSource object to this object
     * through the ContentSource foreign key attribute
     *
     * @param l ContentSource
     * @throws TorqueException
     */
    public void addContentSource(ContentSource l) throws TorqueException
    {
        getContentSources().add(l);
        l.setTransport((Transport) this);
    }

    /**
     * The criteria used to select the current contents of collContentSources
     */
    private Criteria lastContentSourcesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getContentSources(new Criteria())
     *
     * @throws TorqueException
     */
    public List getContentSources() throws TorqueException
    {
        if (collContentSources == null)
        {
            collContentSources = getContentSources(new Criteria(10));
        }
        return collContentSources;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Transport has previously
     * been saved, it will retrieve related ContentSources from storage.
     * If this Transport is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getContentSources(Criteria criteria) throws TorqueException
    {
        if (collContentSources == null)
        {
            if (isNew())
            {
               collContentSources = new ArrayList();
            }
            else
            {
                      criteria.add(ContentSourcePeer.TRANSPORT_ID, getTransportId() );
                      collContentSources = ContentSourcePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(ContentSourcePeer.TRANSPORT_ID, getTransportId());
                      if (!lastContentSourcesCriteria.equals(criteria))
                {
                    collContentSources = ContentSourcePeer.doSelect(criteria);
                }
            }
        }
        lastContentSourcesCriteria = criteria;

        return collContentSources;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getContentSources(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getContentSources(Connection con) throws TorqueException
    {
        if (collContentSources == null)
        {
            collContentSources = getContentSources(new Criteria(10), con);
        }
        return collContentSources;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Transport has previously
     * been saved, it will retrieve related ContentSources from storage.
     * If this Transport is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getContentSources(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collContentSources == null)
        {
            if (isNew())
            {
               collContentSources = new ArrayList();
            }
            else
            {
                       criteria.add(ContentSourcePeer.TRANSPORT_ID, getTransportId());
                       collContentSources = ContentSourcePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(ContentSourcePeer.TRANSPORT_ID, getTransportId());
                       if (!lastContentSourcesCriteria.equals(criteria))
                 {
                     collContentSources = ContentSourcePeer.doSelect(criteria, con);
                 }
             }
         }
         lastContentSourcesCriteria = criteria;

         return collContentSources;
     }

                              
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Transport is new, it will return
     * an empty collection; or if this Transport has previously
     * been saved, it will retrieve related ContentSources from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Transport.
     */
    protected List getContentSourcesJoinContentSourceType(Criteria criteria)
        throws TorqueException
    {
        if (collContentSources == null)
        {
            if (isNew())
            {
               collContentSources = new ArrayList();
            }
            else
            {
                            criteria.add(ContentSourcePeer.TRANSPORT_ID, getTransportId());
                            collContentSources = ContentSourcePeer.doSelectJoinContentSourceType(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ContentSourcePeer.TRANSPORT_ID, getTransportId());
                        if (!lastContentSourcesCriteria.equals(criteria))
            {
                collContentSources = ContentSourcePeer.doSelectJoinContentSourceType(criteria);
            }
        }
        lastContentSourcesCriteria = criteria;

        return collContentSources;
    }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Transport is new, it will return
     * an empty collection; or if this Transport has previously
     * been saved, it will retrieve related ContentSources from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Transport.
     */
    protected List getContentSourcesJoinTransport(Criteria criteria)
        throws TorqueException
    {
        if (collContentSources == null)
        {
            if (isNew())
            {
               collContentSources = new ArrayList();
            }
            else
            {
                            criteria.add(ContentSourcePeer.TRANSPORT_ID, getTransportId());
                            collContentSources = ContentSourcePeer.doSelectJoinTransport(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ContentSourcePeer.TRANSPORT_ID, getTransportId());
                        if (!lastContentSourcesCriteria.equals(criteria))
            {
                collContentSources = ContentSourcePeer.doSelectJoinTransport(criteria);
            }
        }
        lastContentSourcesCriteria = criteria;

        return collContentSources;
    }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Transport is new, it will return
     * an empty collection; or if this Transport has previously
     * been saved, it will retrieve related ContentSources from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Transport.
     */
    protected List getContentSourcesJoinPublisher(Criteria criteria)
        throws TorqueException
    {
        if (collContentSources == null)
        {
            if (isNew())
            {
               collContentSources = new ArrayList();
            }
            else
            {
                            criteria.add(ContentSourcePeer.TRANSPORT_ID, getTransportId());
                            collContentSources = ContentSourcePeer.doSelectJoinPublisher(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ContentSourcePeer.TRANSPORT_ID, getTransportId());
                        if (!lastContentSourcesCriteria.equals(criteria))
            {
                collContentSources = ContentSourcePeer.doSelectJoinPublisher(criteria);
            }
        }
        lastContentSourcesCriteria = criteria;

        return collContentSources;
    }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("TransportId");
              fieldNames.add("TransportName");
              fieldNames.add("TransportType");
              fieldNames.add("TransportDesc");
              fieldNames.add("TransportStartTimeout");
              fieldNames.add("TransportImplementation");
              fieldNames.add("IsAuthentificationRequired");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("TransportId"))
        {
                return new Integer(getTransportId());
            }
          if (name.equals("TransportName"))
        {
                return getTransportName();
            }
          if (name.equals("TransportType"))
        {
                return new Byte(getTransportType());
            }
          if (name.equals("TransportDesc"))
        {
                return getTransportDesc();
            }
          if (name.equals("TransportStartTimeout"))
        {
                return getTransportStartTimeout();
            }
          if (name.equals("TransportImplementation"))
        {
                return getTransportImplementation();
            }
          if (name.equals("IsAuthentificationRequired"))
        {
                return new Boolean(getIsAuthentificationRequired());
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(TransportPeer.TRANSPORT_ID))
        {
                return new Integer(getTransportId());
            }
          if (name.equals(TransportPeer.TRANSPORT_NAME))
        {
                return getTransportName();
            }
          if (name.equals(TransportPeer.TRANSPORT_TYPE))
        {
                return new Byte(getTransportType());
            }
          if (name.equals(TransportPeer.TRANSPORT_DESC))
        {
                return getTransportDesc();
            }
          if (name.equals(TransportPeer.TRANSPORT_START_TIMEOUT))
        {
                return getTransportStartTimeout();
            }
          if (name.equals(TransportPeer.TRANSPORT_IMPLEMENTATION))
        {
                return getTransportImplementation();
            }
          if (name.equals(TransportPeer.IS_AUTHENTIFICATION_REQUIRED))
        {
                return new Boolean(getIsAuthentificationRequired());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getTransportId());
            }
              if (pos == 1)
        {
                return getTransportName();
            }
              if (pos == 2)
        {
                return new Byte(getTransportType());
            }
              if (pos == 3)
        {
                return getTransportDesc();
            }
              if (pos == 4)
        {
                return getTransportStartTimeout();
            }
              if (pos == 5)
        {
                return getTransportImplementation();
            }
              if (pos == 6)
        {
                return new Boolean(getIsAuthentificationRequired());
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(TransportPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    TransportPeer.doInsert((Transport) this, con);
                    setNew(false);
                }
                else
                {
                    TransportPeer.doUpdate((Transport) this, con);
                }
            }

                                      
                
            if (collTransportAttributes != null)
            {
                for (int i = 0; i < collTransportAttributes.size(); i++)
                {
                    ((TransportAttribute) collTransportAttributes.get(i)).save(con);
                }
            }
                                          
                
            if (collClientTransportLnks != null)
            {
                for (int i = 0; i < collClientTransportLnks.size(); i++)
                {
                    ((ClientTransportLnk) collClientTransportLnks.get(i)).save(con);
                }
            }
                                          
                
            if (collContentSources != null)
            {
                for (int i = 0; i < collContentSources.size(); i++)
                {
                    ((ContentSource) collContentSources.get(i)).save(con);
                }
            }
                          alreadyInSave = false;
        }
      }


                          
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  transportId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setTransportId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setTransportId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getTransportId());
      }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Transport copy() throws TorqueException
    {
        return copyInto(new Transport());
    }
  
    protected Transport copyInto(Transport copyObj) throws TorqueException
    {
          copyObj.setTransportId(transportId);
          copyObj.setTransportName(transportName);
          copyObj.setTransportType(transportType);
          copyObj.setTransportDesc(transportDesc);
          copyObj.setTransportStartTimeout(transportStartTimeout);
          copyObj.setTransportImplementation(transportImplementation);
          copyObj.setIsAuthentificationRequired(isAuthentificationRequired);
  
                    copyObj.setTransportId(0);
                                                
                                      
                
        List v = getTransportAttributes();
        for (int i = 0; i < v.size(); i++)
        {
            TransportAttribute obj = (TransportAttribute) v.get(i);
            copyObj.addTransportAttribute(obj.copy());
        }
                                                  
                
        v = getClientTransportLnks();
        for (int i = 0; i < v.size(); i++)
        {
            ClientTransportLnk obj = (ClientTransportLnk) v.get(i);
            copyObj.addClientTransportLnk(obj.copy());
        }
                                                  
                
        v = getContentSources();
        for (int i = 0; i < v.size(); i++)
        {
            ContentSource obj = (ContentSource) v.get(i);
            copyObj.addContentSource(obj.copy());
        }
                    
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public TransportPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Transport:\n");
        str.append("TransportId = ")
           .append(getTransportId())
           .append("\n");
        str.append("TransportName = ")
           .append(getTransportName())
           .append("\n");
        str.append("TransportType = ")
           .append(getTransportType())
           .append("\n");
        str.append("TransportDesc = ")
           .append(getTransportDesc())
           .append("\n");
        str.append("TransportStartTimeout = ")
           .append(getTransportStartTimeout())
           .append("\n");
        str.append("TransportImplementation = ")
           .append(getTransportImplementation())
           .append("\n");
        str.append("IsAuthentificationRequired = ")
           .append(getIsAuthentificationRequired())
           .append("\n");
        return(str.toString());
    }
}
