package net.sf.iquiver.om;


import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Sun Apr 04 20:29:12 CEST 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Address
 */
public abstract class BaseAddress extends BaseObject
{
    /** The Peer class */
    private static final AddressPeer peer =
        new AddressPeer();

        
    /** The value for the addressId field */
    private long addressId;
      
    /** The value for the addressName field */
    private String addressName;
      
    /** The value for the addressStreet field */
    private String addressStreet;
      
    /** The value for the addressZip field */
    private String addressZip;
      
    /** The value for the addressPoBox field */
    private String addressPoBox;
      
    /** The value for the addressPoBoxZip field */
    private String addressPoBoxZip;
      
    /** The value for the addressPhone field */
    private String addressPhone;
      
    /** The value for the addressMobile field */
    private String addressMobile;
      
    /** The value for the addressEmail field */
    private String addressEmail;
      
    /** The value for the addressUrl field */
    private String addressUrl;
      
    /** The value for the addressNumber field */
    private String addressNumber;
      
    /** The value for the addressCountry field */
    private String addressCountry;
  
    
    /**
     * Get the AddressId
     *
     * @return long
     */
    public long getAddressId()
    {
        return addressId;
    }

                                              
    /**
     * Set the value of AddressId
     *
     * @param v new value
     */
    public void setAddressId(long v) throws TorqueException
    {
    
                  if (this.addressId != v)
              {
            this.addressId = v;
            setModified(true);
        }
    
          
                                  
        // update associated User
        if (collUsers != null)
        {
            for (int i = 0; i < collUsers.size(); i++)
            {
                ((User) collUsers.get(i))
                    .setAddressId(v);
            }
        }
                                          
        // update associated Client
        if (collClients != null)
        {
            for (int i = 0; i < collClients.size(); i++)
            {
                ((Client) collClients.get(i))
                    .setAddressId(v);
            }
        }
                                          
        // update associated Publisher
        if (collPublishers != null)
        {
            for (int i = 0; i < collPublishers.size(); i++)
            {
                ((Publisher) collPublishers.get(i))
                    .setAddressId(v);
            }
        }
                      }
  
    /**
     * Get the AddressName
     *
     * @return String
     */
    public String getAddressName()
    {
        return addressName;
    }

                        
    /**
     * Set the value of AddressName
     *
     * @param v new value
     */
    public void setAddressName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.addressName, v))
              {
            this.addressName = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AddressStreet
     *
     * @return String
     */
    public String getAddressStreet()
    {
        return addressStreet;
    }

                        
    /**
     * Set the value of AddressStreet
     *
     * @param v new value
     */
    public void setAddressStreet(String v) 
    {
    
                  if (!ObjectUtils.equals(this.addressStreet, v))
              {
            this.addressStreet = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AddressZip
     *
     * @return String
     */
    public String getAddressZip()
    {
        return addressZip;
    }

                        
    /**
     * Set the value of AddressZip
     *
     * @param v new value
     */
    public void setAddressZip(String v) 
    {
    
                  if (!ObjectUtils.equals(this.addressZip, v))
              {
            this.addressZip = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AddressPoBox
     *
     * @return String
     */
    public String getAddressPoBox()
    {
        return addressPoBox;
    }

                        
    /**
     * Set the value of AddressPoBox
     *
     * @param v new value
     */
    public void setAddressPoBox(String v) 
    {
    
                  if (!ObjectUtils.equals(this.addressPoBox, v))
              {
            this.addressPoBox = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AddressPoBoxZip
     *
     * @return String
     */
    public String getAddressPoBoxZip()
    {
        return addressPoBoxZip;
    }

                        
    /**
     * Set the value of AddressPoBoxZip
     *
     * @param v new value
     */
    public void setAddressPoBoxZip(String v) 
    {
    
                  if (!ObjectUtils.equals(this.addressPoBoxZip, v))
              {
            this.addressPoBoxZip = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AddressPhone
     *
     * @return String
     */
    public String getAddressPhone()
    {
        return addressPhone;
    }

                        
    /**
     * Set the value of AddressPhone
     *
     * @param v new value
     */
    public void setAddressPhone(String v) 
    {
    
                  if (!ObjectUtils.equals(this.addressPhone, v))
              {
            this.addressPhone = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AddressMobile
     *
     * @return String
     */
    public String getAddressMobile()
    {
        return addressMobile;
    }

                        
    /**
     * Set the value of AddressMobile
     *
     * @param v new value
     */
    public void setAddressMobile(String v) 
    {
    
                  if (!ObjectUtils.equals(this.addressMobile, v))
              {
            this.addressMobile = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AddressEmail
     *
     * @return String
     */
    public String getAddressEmail()
    {
        return addressEmail;
    }

                        
    /**
     * Set the value of AddressEmail
     *
     * @param v new value
     */
    public void setAddressEmail(String v) 
    {
    
                  if (!ObjectUtils.equals(this.addressEmail, v))
              {
            this.addressEmail = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AddressUrl
     *
     * @return String
     */
    public String getAddressUrl()
    {
        return addressUrl;
    }

                        
    /**
     * Set the value of AddressUrl
     *
     * @param v new value
     */
    public void setAddressUrl(String v) 
    {
    
                  if (!ObjectUtils.equals(this.addressUrl, v))
              {
            this.addressUrl = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AddressNumber
     *
     * @return String
     */
    public String getAddressNumber()
    {
        return addressNumber;
    }

                        
    /**
     * Set the value of AddressNumber
     *
     * @param v new value
     */
    public void setAddressNumber(String v) 
    {
    
                  if (!ObjectUtils.equals(this.addressNumber, v))
              {
            this.addressNumber = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AddressCountry
     *
     * @return String
     */
    public String getAddressCountry()
    {
        return addressCountry;
    }

                        
    /**
     * Set the value of AddressCountry
     *
     * @param v new value
     */
    public void setAddressCountry(String v) 
    {
    
                  if (!ObjectUtils.equals(this.addressCountry, v))
              {
            this.addressCountry = v;
            setModified(true);
        }
    
          
              }
  
         
                                
            
    /**
     * Collection to store aggregation of collUsers
     */
    protected List collUsers;

    /**
     * Temporary storage of collUsers to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUsers()
    {
        if (collUsers == null)
        {
            collUsers = new ArrayList();
        }
    }

    /**
     * Method called to associate a User object to this object
     * through the User foreign key attribute
     *
     * @param l User
     * @throws TorqueException
     */
    public void addUser(User l) throws TorqueException
    {
        getUsers().add(l);
        l.setAddress((Address) this);
    }

    /**
     * The criteria used to select the current contents of collUsers
     */
    private Criteria lastUsersCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUsers(new Criteria())
     *
     * @throws TorqueException
     */
    public List getUsers() throws TorqueException
    {
        if (collUsers == null)
        {
            collUsers = getUsers(new Criteria(10));
        }
        return collUsers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Address has previously
     * been saved, it will retrieve related Users from storage.
     * If this Address is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getUsers(Criteria criteria) throws TorqueException
    {
        if (collUsers == null)
        {
            if (isNew())
            {
               collUsers = new ArrayList();
            }
            else
            {
                      criteria.add(UserPeer.ADDRESS_ID, getAddressId() );
                      collUsers = UserPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(UserPeer.ADDRESS_ID, getAddressId());
                      if (!lastUsersCriteria.equals(criteria))
                {
                    collUsers = UserPeer.doSelect(criteria);
                }
            }
        }
        lastUsersCriteria = criteria;

        return collUsers;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUsers(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUsers(Connection con) throws TorqueException
    {
        if (collUsers == null)
        {
            collUsers = getUsers(new Criteria(10), con);
        }
        return collUsers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Address has previously
     * been saved, it will retrieve related Users from storage.
     * If this Address is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUsers(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collUsers == null)
        {
            if (isNew())
            {
               collUsers = new ArrayList();
            }
            else
            {
                       criteria.add(UserPeer.ADDRESS_ID, getAddressId());
                       collUsers = UserPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(UserPeer.ADDRESS_ID, getAddressId());
                       if (!lastUsersCriteria.equals(criteria))
                 {
                     collUsers = UserPeer.doSelect(criteria, con);
                 }
             }
         }
         lastUsersCriteria = criteria;

         return collUsers;
     }

                        
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Address is new, it will return
     * an empty collection; or if this Address has previously
     * been saved, it will retrieve related Users from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Address.
     */
    protected List getUsersJoinClient(Criteria criteria)
        throws TorqueException
    {
        if (collUsers == null)
        {
            if (isNew())
            {
               collUsers = new ArrayList();
            }
            else
            {
                            criteria.add(UserPeer.ADDRESS_ID, getAddressId());
                            collUsers = UserPeer.doSelectJoinClient(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(UserPeer.ADDRESS_ID, getAddressId());
                        if (!lastUsersCriteria.equals(criteria))
            {
                collUsers = UserPeer.doSelectJoinClient(criteria);
            }
        }
        lastUsersCriteria = criteria;

        return collUsers;
    }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Address is new, it will return
     * an empty collection; or if this Address has previously
     * been saved, it will retrieve related Users from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Address.
     */
    protected List getUsersJoinAddress(Criteria criteria)
        throws TorqueException
    {
        if (collUsers == null)
        {
            if (isNew())
            {
               collUsers = new ArrayList();
            }
            else
            {
                            criteria.add(UserPeer.ADDRESS_ID, getAddressId());
                            collUsers = UserPeer.doSelectJoinAddress(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(UserPeer.ADDRESS_ID, getAddressId());
                        if (!lastUsersCriteria.equals(criteria))
            {
                collUsers = UserPeer.doSelectJoinAddress(criteria);
            }
        }
        lastUsersCriteria = criteria;

        return collUsers;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collClients
     */
    protected List collClients;

    /**
     * Temporary storage of collClients to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initClients()
    {
        if (collClients == null)
        {
            collClients = new ArrayList();
        }
    }

    /**
     * Method called to associate a Client object to this object
     * through the Client foreign key attribute
     *
     * @param l Client
     * @throws TorqueException
     */
    public void addClient(Client l) throws TorqueException
    {
        getClients().add(l);
        l.setAddress((Address) this);
    }

    /**
     * The criteria used to select the current contents of collClients
     */
    private Criteria lastClientsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getClients(new Criteria())
     *
     * @throws TorqueException
     */
    public List getClients() throws TorqueException
    {
        if (collClients == null)
        {
            collClients = getClients(new Criteria(10));
        }
        return collClients;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Address has previously
     * been saved, it will retrieve related Clients from storage.
     * If this Address is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getClients(Criteria criteria) throws TorqueException
    {
        if (collClients == null)
        {
            if (isNew())
            {
               collClients = new ArrayList();
            }
            else
            {
                      criteria.add(ClientPeer.ADDRESS_ID, getAddressId() );
                      collClients = ClientPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(ClientPeer.ADDRESS_ID, getAddressId());
                      if (!lastClientsCriteria.equals(criteria))
                {
                    collClients = ClientPeer.doSelect(criteria);
                }
            }
        }
        lastClientsCriteria = criteria;

        return collClients;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getClients(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getClients(Connection con) throws TorqueException
    {
        if (collClients == null)
        {
            collClients = getClients(new Criteria(10), con);
        }
        return collClients;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Address has previously
     * been saved, it will retrieve related Clients from storage.
     * If this Address is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getClients(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collClients == null)
        {
            if (isNew())
            {
               collClients = new ArrayList();
            }
            else
            {
                       criteria.add(ClientPeer.ADDRESS_ID, getAddressId());
                       collClients = ClientPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(ClientPeer.ADDRESS_ID, getAddressId());
                       if (!lastClientsCriteria.equals(criteria))
                 {
                     collClients = ClientPeer.doSelect(criteria, con);
                 }
             }
         }
         lastClientsCriteria = criteria;

         return collClients;
     }

                  
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Address is new, it will return
     * an empty collection; or if this Address has previously
     * been saved, it will retrieve related Clients from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Address.
     */
    protected List getClientsJoinAddress(Criteria criteria)
        throws TorqueException
    {
        if (collClients == null)
        {
            if (isNew())
            {
               collClients = new ArrayList();
            }
            else
            {
                            criteria.add(ClientPeer.ADDRESS_ID, getAddressId());
                            collClients = ClientPeer.doSelectJoinAddress(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ClientPeer.ADDRESS_ID, getAddressId());
                        if (!lastClientsCriteria.equals(criteria))
            {
                collClients = ClientPeer.doSelectJoinAddress(criteria);
            }
        }
        lastClientsCriteria = criteria;

        return collClients;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collPublishers
     */
    protected List collPublishers;

    /**
     * Temporary storage of collPublishers to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPublishers()
    {
        if (collPublishers == null)
        {
            collPublishers = new ArrayList();
        }
    }

    /**
     * Method called to associate a Publisher object to this object
     * through the Publisher foreign key attribute
     *
     * @param l Publisher
     * @throws TorqueException
     */
    public void addPublisher(Publisher l) throws TorqueException
    {
        getPublishers().add(l);
        l.setAddress((Address) this);
    }

    /**
     * The criteria used to select the current contents of collPublishers
     */
    private Criteria lastPublishersCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPublishers(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPublishers() throws TorqueException
    {
        if (collPublishers == null)
        {
            collPublishers = getPublishers(new Criteria(10));
        }
        return collPublishers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Address has previously
     * been saved, it will retrieve related Publishers from storage.
     * If this Address is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPublishers(Criteria criteria) throws TorqueException
    {
        if (collPublishers == null)
        {
            if (isNew())
            {
               collPublishers = new ArrayList();
            }
            else
            {
                      criteria.add(PublisherPeer.ADDRESS_ID, getAddressId() );
                      collPublishers = PublisherPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(PublisherPeer.ADDRESS_ID, getAddressId());
                      if (!lastPublishersCriteria.equals(criteria))
                {
                    collPublishers = PublisherPeer.doSelect(criteria);
                }
            }
        }
        lastPublishersCriteria = criteria;

        return collPublishers;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPublishers(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPublishers(Connection con) throws TorqueException
    {
        if (collPublishers == null)
        {
            collPublishers = getPublishers(new Criteria(10), con);
        }
        return collPublishers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Address has previously
     * been saved, it will retrieve related Publishers from storage.
     * If this Address is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPublishers(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collPublishers == null)
        {
            if (isNew())
            {
               collPublishers = new ArrayList();
            }
            else
            {
                       criteria.add(PublisherPeer.ADDRESS_ID, getAddressId());
                       collPublishers = PublisherPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(PublisherPeer.ADDRESS_ID, getAddressId());
                       if (!lastPublishersCriteria.equals(criteria))
                 {
                     collPublishers = PublisherPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPublishersCriteria = criteria;

         return collPublishers;
     }

                  
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Address is new, it will return
     * an empty collection; or if this Address has previously
     * been saved, it will retrieve related Publishers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Address.
     */
    protected List getPublishersJoinAddress(Criteria criteria)
        throws TorqueException
    {
        if (collPublishers == null)
        {
            if (isNew())
            {
               collPublishers = new ArrayList();
            }
            else
            {
                            criteria.add(PublisherPeer.ADDRESS_ID, getAddressId());
                            collPublishers = PublisherPeer.doSelectJoinAddress(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(PublisherPeer.ADDRESS_ID, getAddressId());
                        if (!lastPublishersCriteria.equals(criteria))
            {
                collPublishers = PublisherPeer.doSelectJoinAddress(criteria);
            }
        }
        lastPublishersCriteria = criteria;

        return collPublishers;
    }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("AddressId");
              fieldNames.add("AddressName");
              fieldNames.add("AddressStreet");
              fieldNames.add("AddressZip");
              fieldNames.add("AddressPoBox");
              fieldNames.add("AddressPoBoxZip");
              fieldNames.add("AddressPhone");
              fieldNames.add("AddressMobile");
              fieldNames.add("AddressEmail");
              fieldNames.add("AddressUrl");
              fieldNames.add("AddressNumber");
              fieldNames.add("AddressCountry");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("AddressId"))
        {
                return new Long(getAddressId());
            }
          if (name.equals("AddressName"))
        {
                return getAddressName();
            }
          if (name.equals("AddressStreet"))
        {
                return getAddressStreet();
            }
          if (name.equals("AddressZip"))
        {
                return getAddressZip();
            }
          if (name.equals("AddressPoBox"))
        {
                return getAddressPoBox();
            }
          if (name.equals("AddressPoBoxZip"))
        {
                return getAddressPoBoxZip();
            }
          if (name.equals("AddressPhone"))
        {
                return getAddressPhone();
            }
          if (name.equals("AddressMobile"))
        {
                return getAddressMobile();
            }
          if (name.equals("AddressEmail"))
        {
                return getAddressEmail();
            }
          if (name.equals("AddressUrl"))
        {
                return getAddressUrl();
            }
          if (name.equals("AddressNumber"))
        {
                return getAddressNumber();
            }
          if (name.equals("AddressCountry"))
        {
                return getAddressCountry();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(AddressPeer.ADDRESS_ID))
        {
                return new Long(getAddressId());
            }
          if (name.equals(AddressPeer.ADDRESS_NAME))
        {
                return getAddressName();
            }
          if (name.equals(AddressPeer.ADDRESS_STREET))
        {
                return getAddressStreet();
            }
          if (name.equals(AddressPeer.ADDRESS_ZIP))
        {
                return getAddressZip();
            }
          if (name.equals(AddressPeer.ADDRESS_PO_BOX))
        {
                return getAddressPoBox();
            }
          if (name.equals(AddressPeer.ADDRESS_PO_BOX_ZIP))
        {
                return getAddressPoBoxZip();
            }
          if (name.equals(AddressPeer.ADDRESS_PHONE))
        {
                return getAddressPhone();
            }
          if (name.equals(AddressPeer.ADDRESS_MOBILE))
        {
                return getAddressMobile();
            }
          if (name.equals(AddressPeer.ADDRESS_EMAIL))
        {
                return getAddressEmail();
            }
          if (name.equals(AddressPeer.ADDRESS_URL))
        {
                return getAddressUrl();
            }
          if (name.equals(AddressPeer.ADDRESS_NUMBER))
        {
                return getAddressNumber();
            }
          if (name.equals(AddressPeer.ADDRESS_COUNTRY))
        {
                return getAddressCountry();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Long(getAddressId());
            }
              if (pos == 1)
        {
                return getAddressName();
            }
              if (pos == 2)
        {
                return getAddressStreet();
            }
              if (pos == 3)
        {
                return getAddressZip();
            }
              if (pos == 4)
        {
                return getAddressPoBox();
            }
              if (pos == 5)
        {
                return getAddressPoBoxZip();
            }
              if (pos == 6)
        {
                return getAddressPhone();
            }
              if (pos == 7)
        {
                return getAddressMobile();
            }
              if (pos == 8)
        {
                return getAddressEmail();
            }
              if (pos == 9)
        {
                return getAddressUrl();
            }
              if (pos == 10)
        {
                return getAddressNumber();
            }
              if (pos == 11)
        {
                return getAddressCountry();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(AddressPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    AddressPeer.doInsert((Address) this, con);
                    setNew(false);
                }
                else
                {
                    AddressPeer.doUpdate((Address) this, con);
                }
            }

                                      
                
            if (collUsers != null)
            {
                for (int i = 0; i < collUsers.size(); i++)
                {
                    ((User) collUsers.get(i)).save(con);
                }
            }
                                          
                
            if (collClients != null)
            {
                for (int i = 0; i < collClients.size(); i++)
                {
                    ((Client) collClients.get(i)).save(con);
                }
            }
                                          
                
            if (collPublishers != null)
            {
                for (int i = 0; i < collPublishers.size(); i++)
                {
                    ((Publisher) collPublishers.get(i)).save(con);
                }
            }
                          alreadyInSave = false;
        }
      }


                          
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  addressId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setAddressId(((NumberKey) key).longValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setAddressId(Long.parseLong(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getAddressId());
      }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Address copy() throws TorqueException
    {
        return copyInto(new Address());
    }
  
    protected Address copyInto(Address copyObj) throws TorqueException
    {
          copyObj.setAddressId(addressId);
          copyObj.setAddressName(addressName);
          copyObj.setAddressStreet(addressStreet);
          copyObj.setAddressZip(addressZip);
          copyObj.setAddressPoBox(addressPoBox);
          copyObj.setAddressPoBoxZip(addressPoBoxZip);
          copyObj.setAddressPhone(addressPhone);
          copyObj.setAddressMobile(addressMobile);
          copyObj.setAddressEmail(addressEmail);
          copyObj.setAddressUrl(addressUrl);
          copyObj.setAddressNumber(addressNumber);
          copyObj.setAddressCountry(addressCountry);
  
                    copyObj.setAddressId(0);
                                                                              
                                      
                
        List v = getUsers();
        for (int i = 0; i < v.size(); i++)
        {
            User obj = (User) v.get(i);
            copyObj.addUser(obj.copy());
        }
                                                  
                
        v = getClients();
        for (int i = 0; i < v.size(); i++)
        {
            Client obj = (Client) v.get(i);
            copyObj.addClient(obj.copy());
        }
                                                  
                
        v = getPublishers();
        for (int i = 0; i < v.size(); i++)
        {
            Publisher obj = (Publisher) v.get(i);
            copyObj.addPublisher(obj.copy());
        }
                    
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public AddressPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Address:\n");
        str.append("AddressId = ")
           .append(getAddressId())
           .append("\n");
        str.append("AddressName = ")
           .append(getAddressName())
           .append("\n");
        str.append("AddressStreet = ")
           .append(getAddressStreet())
           .append("\n");
        str.append("AddressZip = ")
           .append(getAddressZip())
           .append("\n");
        str.append("AddressPoBox = ")
           .append(getAddressPoBox())
           .append("\n");
        str.append("AddressPoBoxZip = ")
           .append(getAddressPoBoxZip())
           .append("\n");
        str.append("AddressPhone = ")
           .append(getAddressPhone())
           .append("\n");
        str.append("AddressMobile = ")
           .append(getAddressMobile())
           .append("\n");
        str.append("AddressEmail = ")
           .append(getAddressEmail())
           .append("\n");
        str.append("AddressUrl = ")
           .append(getAddressUrl())
           .append("\n");
        str.append("AddressNumber = ")
           .append(getAddressNumber())
           .append("\n");
        str.append("AddressCountry = ")
           .append(getAddressCountry())
           .append("\n");
        return(str.toString());
    }
}
