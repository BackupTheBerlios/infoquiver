
package net.sf.iquiver.om;


import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Thu Mar 04 20:15:14 CET 2004]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public  class ContentSource
    extends net.sf.iquiver.om.BaseContentSource
    implements Persistent
{
    /**
     * @return
     * @throws TorqueException
     */
    public List getAuthentificationAttributes() throws TorqueException
    {
        Criteria crit = new Criteria();
        crit.addJoin(ContentSourceTransportConfigPeer.TRANSPORT_ATTRIBUTE_ID, TransportAttributePeer.TRANSPORT_ATTRIBUTE_ID);
        crit.add(TransportAttributePeer.IS_PART_OF_AUTHENTIFICATION, true);
        return getContentSourceTransportConfigs(crit);
    }
    
    /**
     * @return
     * @throws TorqueException
     */
    public List getNonAuthentificationAttributes() throws TorqueException
    {
        Criteria crit = new Criteria();
        crit.addJoin(ContentSourceTransportConfigPeer.TRANSPORT_ATTRIBUTE_ID, TransportAttributePeer.TRANSPORT_ATTRIBUTE_ID);
        crit.add(TransportAttributePeer.IS_PART_OF_AUTHENTIFICATION, false);
        
        return getContentSourceTransportConfigs(crit);        
    }
    
    /**
     * @return
     * @throws TorqueException
     */
    public Map getAuthentificationAttributesAsNamedMap() throws TorqueException
    {
        Map results = new HashMap();
        List auth_attributes = getAuthentificationAttributes();
        
        for(Iterator it = auth_attributes.iterator(); it.hasNext();)
        {
            ContentSourceTransportConfig config = (ContentSourceTransportConfig)it.next();
            TransportAttribute attr = TransportAttributePeer.retrieveByPK(config.getTransportAttributeId());            
            results.put(attr.getTransportAttributeName(), config.getTransportAttributeValue());
        }
        
        return results;
    }

    /**
     * @return
     * @throws TorqueException
     */
    public Map getNonAuthentificationAttributesAsNamedMap() throws TorqueException
    {
        Map results = new HashMap();
        List auth_attributes = getNonAuthentificationAttributes();
        
        for(Iterator it = auth_attributes.iterator(); it.hasNext();)
        {
            ContentSourceTransportConfig config = (ContentSourceTransportConfig)it.next();
            TransportAttribute attr = TransportAttributePeer.retrieveByPK(config.getTransportAttributeId());            
            results.put(attr.getTransportAttributeName(), config.getTransportAttributeValue());            
            results.put(attr.getTransportAttributeName(), config.getTransportAttributeValue());
        }
        
        return results;
    }
    
}
