package net.sf.iquiver.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
    
    
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Sat Mar 20 16:37:12 CET 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to ContentSource
 */
public abstract class BaseContentSource extends BaseObject
{
    /** The Peer class */
    private static final ContentSourcePeer peer =
        new ContentSourcePeer();

        
    /** The value for the contentSourceId field */
    private long contentSourceId;
      
    /** The value for the contentSourceTypeId field */
    private int contentSourceTypeId;
      
    /** The value for the transportId field */
    private int transportId;
      
    /** The value for the publisherId field */
    private int publisherId;
      
    /** The value for the contentSourceName field */
    private String contentSourceName;
      
    /** The value for the contentSourceDesc field */
    private String contentSourceDesc;
      
    /** The value for the contentSourceUpdateTimespan field */
    private long contentSourceUpdateTimespan;
      
    /** The value for the isAuthentificationRequired field */
    private boolean isAuthentificationRequired;
  
    
    /**
     * Get the ContentSourceId
     *
     * @return long
     */
    public long getContentSourceId()
    {
        return contentSourceId;
    }

                                              
    /**
     * Set the value of ContentSourceId
     *
     * @param v new value
     */
    public void setContentSourceId(long v) throws TorqueException
    {
    
                  if (this.contentSourceId != v)
              {
            this.contentSourceId = v;
            setModified(true);
        }
    
          
                                  
        // update associated ContentSourceTransportConfig
        if (collContentSourceTransportConfigs != null)
        {
            for (int i = 0; i < collContentSourceTransportConfigs.size(); i++)
            {
                ((ContentSourceTransportConfig) collContentSourceTransportConfigs.get(i))
                    .setContentSourceId(v);
            }
        }
                                          
        // update associated Content
        if (collContents != null)
        {
            for (int i = 0; i < collContents.size(); i++)
            {
                ((Content) collContents.get(i))
                    .setContentSourceId(v);
            }
        }
                      }
  
    /**
     * Get the ContentSourceTypeId
     *
     * @return int
     */
    public int getContentSourceTypeId()
    {
        return contentSourceTypeId;
    }

                              
    /**
     * Set the value of ContentSourceTypeId
     *
     * @param v new value
     */
    public void setContentSourceTypeId(int v) throws TorqueException
    {
    
                  if (this.contentSourceTypeId != v)
              {
            this.contentSourceTypeId = v;
            setModified(true);
        }
    
                          
                if (aContentSourceType != null && !(aContentSourceType.getContentSourceTypeId() == v))
                {
            aContentSourceType = null;
        }
      
              }
  
    /**
     * Get the TransportId
     *
     * @return int
     */
    public int getTransportId()
    {
        return transportId;
    }

                              
    /**
     * Set the value of TransportId
     *
     * @param v new value
     */
    public void setTransportId(int v) throws TorqueException
    {
    
                  if (this.transportId != v)
              {
            this.transportId = v;
            setModified(true);
        }
    
                          
                if (aTransport != null && !(aTransport.getTransportId() == v))
                {
            aTransport = null;
        }
      
              }
  
    /**
     * Get the PublisherId
     *
     * @return int
     */
    public int getPublisherId()
    {
        return publisherId;
    }

                              
    /**
     * Set the value of PublisherId
     *
     * @param v new value
     */
    public void setPublisherId(int v) throws TorqueException
    {
    
                  if (this.publisherId != v)
              {
            this.publisherId = v;
            setModified(true);
        }
    
                          
                if (aPublisher != null && !(aPublisher.getPublisherId() == v))
                {
            aPublisher = null;
        }
      
              }
  
    /**
     * Get the ContentSourceName
     *
     * @return String
     */
    public String getContentSourceName()
    {
        return contentSourceName;
    }

                        
    /**
     * Set the value of ContentSourceName
     *
     * @param v new value
     */
    public void setContentSourceName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.contentSourceName, v))
              {
            this.contentSourceName = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ContentSourceDesc
     *
     * @return String
     */
    public String getContentSourceDesc()
    {
        return contentSourceDesc;
    }

                        
    /**
     * Set the value of ContentSourceDesc
     *
     * @param v new value
     */
    public void setContentSourceDesc(String v) 
    {
    
                  if (!ObjectUtils.equals(this.contentSourceDesc, v))
              {
            this.contentSourceDesc = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ContentSourceUpdateTimespan
     *
     * @return long
     */
    public long getContentSourceUpdateTimespan()
    {
        return contentSourceUpdateTimespan;
    }

                        
    /**
     * Set the value of ContentSourceUpdateTimespan
     *
     * @param v new value
     */
    public void setContentSourceUpdateTimespan(long v) 
    {
    
                  if (this.contentSourceUpdateTimespan != v)
              {
            this.contentSourceUpdateTimespan = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the IsAuthentificationRequired
     *
     * @return boolean
     */
    public boolean getIsAuthentificationRequired()
    {
        return isAuthentificationRequired;
    }

                        
    /**
     * Set the value of IsAuthentificationRequired
     *
     * @param v new value
     */
    public void setIsAuthentificationRequired(boolean v) 
    {
    
                  if (this.isAuthentificationRequired != v)
              {
            this.isAuthentificationRequired = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private ContentSourceType aContentSourceType;

    /**
     * Declares an association between this object and a ContentSourceType object
     *
     * @param v ContentSourceType
     * @throws TorqueException
     */
    public void setContentSourceType(ContentSourceType v) throws TorqueException
    {
            if (v == null)
        {
                    setContentSourceTypeId(0);
                  }
        else
        {
            setContentSourceTypeId(v.getContentSourceTypeId());
        }
                aContentSourceType = v;
    }

                                            
    /**
     * Get the associated ContentSourceType object
     *
     * @return the associated ContentSourceType object
     * @throws TorqueException
     */
    public ContentSourceType getContentSourceType() throws TorqueException
    {
        if (aContentSourceType == null && (this.contentSourceTypeId > 0))
        {
                          aContentSourceType = ContentSourceTypePeer.retrieveByPK(SimpleKey.keyFor(this.contentSourceTypeId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               ContentSourceType obj = ContentSourceTypePeer.retrieveByPK(this.contentSourceTypeId);
               obj.addContentSources(this);
            */
        }
        return aContentSourceType;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
           */
    public void setContentSourceTypeKey(ObjectKey key) throws TorqueException
    {
      
                        setContentSourceTypeId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Transport aTransport;

    /**
     * Declares an association between this object and a Transport object
     *
     * @param v Transport
     * @throws TorqueException
     */
    public void setTransport(Transport v) throws TorqueException
    {
            if (v == null)
        {
                    setTransportId(0);
                  }
        else
        {
            setTransportId(v.getTransportId());
        }
                aTransport = v;
    }

                                            
    /**
     * Get the associated Transport object
     *
     * @return the associated Transport object
     * @throws TorqueException
     */
    public Transport getTransport() throws TorqueException
    {
        if (aTransport == null && (this.transportId > 0))
        {
                          aTransport = TransportPeer.retrieveByPK(SimpleKey.keyFor(this.transportId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Transport obj = TransportPeer.retrieveByPK(this.transportId);
               obj.addContentSources(this);
            */
        }
        return aTransport;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
           */
    public void setTransportKey(ObjectKey key) throws TorqueException
    {
      
                        setTransportId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Publisher aPublisher;

    /**
     * Declares an association between this object and a Publisher object
     *
     * @param v Publisher
     * @throws TorqueException
     */
    public void setPublisher(Publisher v) throws TorqueException
    {
            if (v == null)
        {
                    setPublisherId(0);
                  }
        else
        {
            setPublisherId(v.getPublisherId());
        }
                aPublisher = v;
    }

                                            
    /**
     * Get the associated Publisher object
     *
     * @return the associated Publisher object
     * @throws TorqueException
     */
    public Publisher getPublisher() throws TorqueException
    {
        if (aPublisher == null && (this.publisherId > 0))
        {
                          aPublisher = PublisherPeer.retrieveByPK(SimpleKey.keyFor(this.publisherId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Publisher obj = PublisherPeer.retrieveByPK(this.publisherId);
               obj.addContentSources(this);
            */
        }
        return aPublisher;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
           */
    public void setPublisherKey(ObjectKey key) throws TorqueException
    {
      
                        setPublisherId(((NumberKey) key).intValue());
                  }
       
                                
            
    /**
     * Collection to store aggregation of collContentSourceTransportConfigs
     */
    protected List collContentSourceTransportConfigs;

    /**
     * Temporary storage of collContentSourceTransportConfigs to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initContentSourceTransportConfigs()
    {
        if (collContentSourceTransportConfigs == null)
        {
            collContentSourceTransportConfigs = new ArrayList();
        }
    }

    /**
     * Method called to associate a ContentSourceTransportConfig object to this object
     * through the ContentSourceTransportConfig foreign key attribute
     *
     * @param l ContentSourceTransportConfig
     * @throws TorqueException
     */
    public void addContentSourceTransportConfig(ContentSourceTransportConfig l) throws TorqueException
    {
        getContentSourceTransportConfigs().add(l);
        l.setContentSource((ContentSource) this);
    }

    /**
     * The criteria used to select the current contents of collContentSourceTransportConfigs
     */
    private Criteria lastContentSourceTransportConfigsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getContentSourceTransportConfigs(new Criteria())
     *
     * @throws TorqueException
     */
    public List getContentSourceTransportConfigs() throws TorqueException
    {
        if (collContentSourceTransportConfigs == null)
        {
            collContentSourceTransportConfigs = getContentSourceTransportConfigs(new Criteria(10));
        }
        return collContentSourceTransportConfigs;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this ContentSource has previously
     * been saved, it will retrieve related ContentSourceTransportConfigs from storage.
     * If this ContentSource is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getContentSourceTransportConfigs(Criteria criteria) throws TorqueException
    {
        if (collContentSourceTransportConfigs == null)
        {
            if (isNew())
            {
               collContentSourceTransportConfigs = new ArrayList();
            }
            else
            {
                      criteria.add(ContentSourceTransportConfigPeer.CONTENT_SOURCE_ID, getContentSourceId() );
                      collContentSourceTransportConfigs = ContentSourceTransportConfigPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(ContentSourceTransportConfigPeer.CONTENT_SOURCE_ID, getContentSourceId());
                      if (!lastContentSourceTransportConfigsCriteria.equals(criteria))
                {
                    collContentSourceTransportConfigs = ContentSourceTransportConfigPeer.doSelect(criteria);
                }
            }
        }
        lastContentSourceTransportConfigsCriteria = criteria;

        return collContentSourceTransportConfigs;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getContentSourceTransportConfigs(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getContentSourceTransportConfigs(Connection con) throws TorqueException
    {
        if (collContentSourceTransportConfigs == null)
        {
            collContentSourceTransportConfigs = getContentSourceTransportConfigs(new Criteria(10), con);
        }
        return collContentSourceTransportConfigs;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this ContentSource has previously
     * been saved, it will retrieve related ContentSourceTransportConfigs from storage.
     * If this ContentSource is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getContentSourceTransportConfigs(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collContentSourceTransportConfigs == null)
        {
            if (isNew())
            {
               collContentSourceTransportConfigs = new ArrayList();
            }
            else
            {
                       criteria.add(ContentSourceTransportConfigPeer.CONTENT_SOURCE_ID, getContentSourceId());
                       collContentSourceTransportConfigs = ContentSourceTransportConfigPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(ContentSourceTransportConfigPeer.CONTENT_SOURCE_ID, getContentSourceId());
                       if (!lastContentSourceTransportConfigsCriteria.equals(criteria))
                 {
                     collContentSourceTransportConfigs = ContentSourceTransportConfigPeer.doSelect(criteria, con);
                 }
             }
         }
         lastContentSourceTransportConfigsCriteria = criteria;

         return collContentSourceTransportConfigs;
     }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this ContentSource is new, it will return
     * an empty collection; or if this ContentSource has previously
     * been saved, it will retrieve related ContentSourceTransportConfigs from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContentSource.
     */
    protected List getContentSourceTransportConfigsJoinContentSource(Criteria criteria)
        throws TorqueException
    {
        if (collContentSourceTransportConfigs == null)
        {
            if (isNew())
            {
               collContentSourceTransportConfigs = new ArrayList();
            }
            else
            {
                            criteria.add(ContentSourceTransportConfigPeer.CONTENT_SOURCE_ID, getContentSourceId());
                            collContentSourceTransportConfigs = ContentSourceTransportConfigPeer.doSelectJoinContentSource(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ContentSourceTransportConfigPeer.CONTENT_SOURCE_ID, getContentSourceId());
                        if (!lastContentSourceTransportConfigsCriteria.equals(criteria))
            {
                collContentSourceTransportConfigs = ContentSourceTransportConfigPeer.doSelectJoinContentSource(criteria);
            }
        }
        lastContentSourceTransportConfigsCriteria = criteria;

        return collContentSourceTransportConfigs;
    }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this ContentSource is new, it will return
     * an empty collection; or if this ContentSource has previously
     * been saved, it will retrieve related ContentSourceTransportConfigs from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContentSource.
     */
    protected List getContentSourceTransportConfigsJoinTransportAttribute(Criteria criteria)
        throws TorqueException
    {
        if (collContentSourceTransportConfigs == null)
        {
            if (isNew())
            {
               collContentSourceTransportConfigs = new ArrayList();
            }
            else
            {
                            criteria.add(ContentSourceTransportConfigPeer.CONTENT_SOURCE_ID, getContentSourceId());
                            collContentSourceTransportConfigs = ContentSourceTransportConfigPeer.doSelectJoinTransportAttribute(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ContentSourceTransportConfigPeer.CONTENT_SOURCE_ID, getContentSourceId());
                        if (!lastContentSourceTransportConfigsCriteria.equals(criteria))
            {
                collContentSourceTransportConfigs = ContentSourceTransportConfigPeer.doSelectJoinTransportAttribute(criteria);
            }
        }
        lastContentSourceTransportConfigsCriteria = criteria;

        return collContentSourceTransportConfigs;
    }
                            


                          
            
    /**
     * Collection to store aggregation of collContents
     */
    protected List collContents;

    /**
     * Temporary storage of collContents to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initContents()
    {
        if (collContents == null)
        {
            collContents = new ArrayList();
        }
    }

    /**
     * Method called to associate a Content object to this object
     * through the Content foreign key attribute
     *
     * @param l Content
     * @throws TorqueException
     */
    public void addContent(Content l) throws TorqueException
    {
        getContents().add(l);
        l.setContentSource((ContentSource) this);
    }

    /**
     * The criteria used to select the current contents of collContents
     */
    private Criteria lastContentsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getContents(new Criteria())
     *
     * @throws TorqueException
     */
    public List getContents() throws TorqueException
    {
        if (collContents == null)
        {
            collContents = getContents(new Criteria(10));
        }
        return collContents;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this ContentSource has previously
     * been saved, it will retrieve related Contents from storage.
     * If this ContentSource is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getContents(Criteria criteria) throws TorqueException
    {
        if (collContents == null)
        {
            if (isNew())
            {
               collContents = new ArrayList();
            }
            else
            {
                      criteria.add(ContentPeer.CONTENT_SOURCE_ID, getContentSourceId() );
                      collContents = ContentPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(ContentPeer.CONTENT_SOURCE_ID, getContentSourceId());
                      if (!lastContentsCriteria.equals(criteria))
                {
                    collContents = ContentPeer.doSelect(criteria);
                }
            }
        }
        lastContentsCriteria = criteria;

        return collContents;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getContents(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getContents(Connection con) throws TorqueException
    {
        if (collContents == null)
        {
            collContents = getContents(new Criteria(10), con);
        }
        return collContents;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this ContentSource has previously
     * been saved, it will retrieve related Contents from storage.
     * If this ContentSource is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getContents(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collContents == null)
        {
            if (isNew())
            {
               collContents = new ArrayList();
            }
            else
            {
                       criteria.add(ContentPeer.CONTENT_SOURCE_ID, getContentSourceId());
                       collContents = ContentPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(ContentPeer.CONTENT_SOURCE_ID, getContentSourceId());
                       if (!lastContentsCriteria.equals(criteria))
                 {
                     collContents = ContentPeer.doSelect(criteria, con);
                 }
             }
         }
         lastContentsCriteria = criteria;

         return collContents;
     }

                  
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this ContentSource is new, it will return
     * an empty collection; or if this ContentSource has previously
     * been saved, it will retrieve related Contents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContentSource.
     */
    protected List getContentsJoinContentSource(Criteria criteria)
        throws TorqueException
    {
        if (collContents == null)
        {
            if (isNew())
            {
               collContents = new ArrayList();
            }
            else
            {
                            criteria.add(ContentPeer.CONTENT_SOURCE_ID, getContentSourceId());
                            collContents = ContentPeer.doSelectJoinContentSource(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ContentPeer.CONTENT_SOURCE_ID, getContentSourceId());
                        if (!lastContentsCriteria.equals(criteria))
            {
                collContents = ContentPeer.doSelectJoinContentSource(criteria);
            }
        }
        lastContentsCriteria = criteria;

        return collContents;
    }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("ContentSourceId");
              fieldNames.add("ContentSourceTypeId");
              fieldNames.add("TransportId");
              fieldNames.add("PublisherId");
              fieldNames.add("ContentSourceName");
              fieldNames.add("ContentSourceDesc");
              fieldNames.add("ContentSourceUpdateTimespan");
              fieldNames.add("IsAuthentificationRequired");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("ContentSourceId"))
        {
                return new Long(getContentSourceId());
            }
          if (name.equals("ContentSourceTypeId"))
        {
                return new Integer(getContentSourceTypeId());
            }
          if (name.equals("TransportId"))
        {
                return new Integer(getTransportId());
            }
          if (name.equals("PublisherId"))
        {
                return new Integer(getPublisherId());
            }
          if (name.equals("ContentSourceName"))
        {
                return getContentSourceName();
            }
          if (name.equals("ContentSourceDesc"))
        {
                return getContentSourceDesc();
            }
          if (name.equals("ContentSourceUpdateTimespan"))
        {
                return new Long(getContentSourceUpdateTimespan());
            }
          if (name.equals("IsAuthentificationRequired"))
        {
                return new Boolean(getIsAuthentificationRequired());
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ContentSourcePeer.CONTENT_SOURCE_ID))
        {
                return new Long(getContentSourceId());
            }
          if (name.equals(ContentSourcePeer.CONTENT_SOURCE_TYPE_ID))
        {
                return new Integer(getContentSourceTypeId());
            }
          if (name.equals(ContentSourcePeer.TRANSPORT_ID))
        {
                return new Integer(getTransportId());
            }
          if (name.equals(ContentSourcePeer.PUBLISHER_ID))
        {
                return new Integer(getPublisherId());
            }
          if (name.equals(ContentSourcePeer.CONTENT_SOURCE_NAME))
        {
                return getContentSourceName();
            }
          if (name.equals(ContentSourcePeer.CONTENT_SOURCE_DESC))
        {
                return getContentSourceDesc();
            }
          if (name.equals(ContentSourcePeer.CONTENT_SOURCE_UPDATE_TIMESPAN))
        {
                return new Long(getContentSourceUpdateTimespan());
            }
          if (name.equals(ContentSourcePeer.IS_AUTHENTIFICATION_REQUIRED))
        {
                return new Boolean(getIsAuthentificationRequired());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Long(getContentSourceId());
            }
              if (pos == 1)
        {
                return new Integer(getContentSourceTypeId());
            }
              if (pos == 2)
        {
                return new Integer(getTransportId());
            }
              if (pos == 3)
        {
                return new Integer(getPublisherId());
            }
              if (pos == 4)
        {
                return getContentSourceName();
            }
              if (pos == 5)
        {
                return getContentSourceDesc();
            }
              if (pos == 6)
        {
                return new Long(getContentSourceUpdateTimespan());
            }
              if (pos == 7)
        {
                return new Boolean(getIsAuthentificationRequired());
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ContentSourcePeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ContentSourcePeer.doInsert((ContentSource) this, con);
                    setNew(false);
                }
                else
                {
                    ContentSourcePeer.doUpdate((ContentSource) this, con);
                }
            }

                                      
                
            if (collContentSourceTransportConfigs != null)
            {
                for (int i = 0; i < collContentSourceTransportConfigs.size(); i++)
                {
                    ((ContentSourceTransportConfig) collContentSourceTransportConfigs.get(i)).save(con);
                }
            }
                                          
                
            if (collContents != null)
            {
                for (int i = 0; i < collContents.size(); i++)
                {
                    ((Content) collContents.get(i)).save(con);
                }
            }
                          alreadyInSave = false;
        }
      }


                          
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  contentSourceId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setContentSourceId(((NumberKey) key).longValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setContentSourceId(Long.parseLong(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getContentSourceId());
      }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public ContentSource copy() throws TorqueException
    {
        return copyInto(new ContentSource());
    }
  
    protected ContentSource copyInto(ContentSource copyObj) throws TorqueException
    {
          copyObj.setContentSourceId(contentSourceId);
          copyObj.setContentSourceTypeId(contentSourceTypeId);
          copyObj.setTransportId(transportId);
          copyObj.setPublisherId(publisherId);
          copyObj.setContentSourceName(contentSourceName);
          copyObj.setContentSourceDesc(contentSourceDesc);
          copyObj.setContentSourceUpdateTimespan(contentSourceUpdateTimespan);
          copyObj.setIsAuthentificationRequired(isAuthentificationRequired);
  
                    copyObj.setContentSourceId(0);
                                                      
                                      
                
        List v = getContentSourceTransportConfigs();
        for (int i = 0; i < v.size(); i++)
        {
            ContentSourceTransportConfig obj = (ContentSourceTransportConfig) v.get(i);
            copyObj.addContentSourceTransportConfig(obj.copy());
        }
                                                  
                
        v = getContents();
        for (int i = 0; i < v.size(); i++)
        {
            Content obj = (Content) v.get(i);
            copyObj.addContent(obj.copy());
        }
                    
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ContentSourcePeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("ContentSource:\n");
        str.append("ContentSourceId = ")
           .append(getContentSourceId())
           .append("\n");
        str.append("ContentSourceTypeId = ")
           .append(getContentSourceTypeId())
           .append("\n");
        str.append("TransportId = ")
           .append(getTransportId())
           .append("\n");
        str.append("PublisherId = ")
           .append(getPublisherId())
           .append("\n");
        str.append("ContentSourceName = ")
           .append(getContentSourceName())
           .append("\n");
        str.append("ContentSourceDesc = ")
           .append(getContentSourceDesc())
           .append("\n");
        str.append("ContentSourceUpdateTimespan = ")
           .append(getContentSourceUpdateTimespan())
           .append("\n");
        str.append("IsAuthentificationRequired = ")
           .append(getIsAuthentificationRequired())
           .append("\n");
        return(str.toString());
    }
}
