



package net.sf.iquiver.om.cache;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.lang.reflect.Method;
import java.util.regex.Pattern;

import net.sf.iquiver.util.ArrayUtil;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Thu Mar 11 21:51:09 CET 2004]
 *
 */
public class CacheBackedPeerInitializer
{
	final private static Log logger = LogFactory.getLog(CacheBackedPeerInitializer.class);

	public static void intialize(boolean enableCriteriaCache, String[] cacheExcludes, String[] criteriaExcludes)
	{
	    boolean enablePeerCache = true;
	    boolean enablePeerCriteriaCache = enableCriteriaCache;

		  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedUserPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedUserPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedUserPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedUserPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedClientPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedClientPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedClientPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedClientPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedAddressPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedAddressPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedAddressPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedAddressPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedUserGroupPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedUserGroupPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedUserGroupPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedUserGroupPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedUserGroupLnkPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedUserGroupLnkPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedUserGroupLnkPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedUserGroupLnkPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedUserGroupClientLnkPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedUserGroupClientLnkPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedUserGroupClientLnkPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedUserGroupClientLnkPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedTransportPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedTransportPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedTransportPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedTransportPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedTransportAttributePeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedTransportAttributePeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedTransportAttributePeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedTransportAttributePeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedClientTransportLnkPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedClientTransportLnkPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedClientTransportLnkPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedClientTransportLnkPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedPermissionPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedPermissionPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedPermissionPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedPermissionPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedClientPermissionLnkPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedClientPermissionLnkPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedClientPermissionLnkPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedClientPermissionLnkPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedUserGroupPermissionLnkPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedUserGroupPermissionLnkPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedUserGroupPermissionLnkPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedUserGroupPermissionLnkPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedContentSourceTypePeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedContentSourceTypePeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedContentSourceTypePeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedContentSourceTypePeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedPublisherPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedPublisherPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedPublisherPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedPublisherPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedContentSourcePeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedContentSourcePeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedContentSourcePeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedContentSourcePeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedContentSourceTransportConfigPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedContentSourceTransportConfigPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedContentSourceTransportConfigPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedContentSourceTransportConfigPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedContentParserPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedContentParserPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedContentParserPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedContentParserPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedContentTypePeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedContentTypePeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedContentTypePeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedContentTypePeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedContentPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedContentPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedContentPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedContentPeer",e);
		    }
	    }
				  		    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "net.sf.iquiver.om.cache.CacheBackedClientContentLnkPeer");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "net.sf.iquiver.om.cache.CacheBackedClientContentLnkPeer");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "net.sf.iquiver.om.cache.CacheBackedClientContentLnkPeer" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: net.sf.iquiver.om.cache.CacheBackedClientContentLnkPeer",e);
		    }
	    }
				}	
}
