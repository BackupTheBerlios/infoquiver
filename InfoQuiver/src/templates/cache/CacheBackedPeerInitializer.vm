################################################
## CacheBackedPeerInitializer.vm
## Author: netseeker aka Michael Manske
## Created on: 03/04/2004
################################################


#if ($database.Package)
  #set ($package = $database.Package)
#else
  #set ($package = $targetPackage)
#end

#set ( $pkbase = "${package}" )
#set ( $pkpeer = "${package}" )

package ${package}.cache;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.lang.reflect.Method;
import java.util.regex.Pattern;

import net.sf.iquiver.util.ArrayUtil;

/**
#if ($addTimeStamp)
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [$now]
 * Template used: CacheBackedPeerInitializer.vm
 *
 * CacheBackedPeerInitializer is basically a cache starter which will initialize
 * the SwarmCache based cache for all generated peer classed according to the given cache configuration.
 */
#end
public class CacheBackedPeerInitializer
{
	final private static Log logger = LogFactory.getLog(CacheBackedPeerInitializer.class);

	public static void intialize(boolean enableCriteriaCache, String[] cacheExcludes, String[] criteriaExcludes)
	{
	    boolean enablePeerCache = true;
	    boolean enablePeerCriteriaCache = enableCriteriaCache;

	#foreach ($tbl in $database.Tables)
	  	#if (!$tbl.isForReferenceOnly())	    
	  	#set ( $peername = "${package}.cache.CacheBacked${tbl.JavaName}Peer" )
	    
	    if(cacheExcludes != null)
	    {
	    	enablePeerCache = !ArrayUtil.containsMatchingRegExString(cacheExcludes, "$peername");
	    }
	    if(enablePeerCache && enablePeerCriteriaCache && criteriaExcludes != null)
	    {
	    	enablePeerCriteriaCache = !ArrayUtil.containsMatchingRegExString(criteriaExcludes, "$peername");
	    }
		
		if(enablePeerCache)
		{
			try
			{			
				Class clazz = Class.forName( "$peername" );
				Method method = clazz.getMethod( "enableCache", new Class[] { boolean.class } );		    		    
		    	method.invoke( null, new Object[]{Boolean.TRUE} );	  		
	
				if(enablePeerCriteriaCache)
				{
					method = clazz.getMethod( "enableCacheForCriteriaSelects", new Class[] { boolean.class } );
		    		method.invoke( null, new Object[]{Boolean.TRUE} );	  		
		    	}
		    } catch(Exception e)
		    {
		    	logger.error("Error while activating caching for peer: $peername",e);
		    }
	    }
		#end  		
	#end	
	}	
}
