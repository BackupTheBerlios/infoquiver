<!-- ================================================================
    IQuiver Buildfile

	You should not have to edit this file!
	Edit build.properties instead.
================================================================= -->

<project name="iquiver" default="compile" basedir=".">

	<property name="build.properties" value="build.properties" />
	<property file="build.properties" />
	<property name="build.properties" value="build.properties" />

	<path id="compile.classpath">

		<pathelement location="${compile.dir}" />

		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>

	</path>

	<taskdef name="java2wsdl" classname="org.apache.axis.tools.ant.wsdl.Java2WsdlAntTask" classpath="${compile.dir}">
		<classpath refid="compile.classpath" />
	</taskdef>

	<taskdef name="wsdl2java" classname="org.apache.axis.tools.ant.wsdl.Wsdl2javaAntTask" classpath="${compile.dir}">
		<classpath refid="compile.classpath" />
	</taskdef>

	<taskdef name="package2path" classname="org.apache.torque.task.PackageAsPathTask" classpath="${compile.dir}">
		<classpath refid="compile.classpath" />
	</taskdef>

	<!-- ================================================================================================= -->
	<target name="prepare">
		<tstamp />
		<mkdir dir="${compile.dir}" />
	</target>

	<!-- ================================================================================================= -->
	<target name="clean" description="Delete old build directories">
		<delete dir="${compile.dir}" failonerror="false" />
	</target>


	<!-- ================================================================================================= -->
	<target name="compile" depends="prepare" description="Compile Java sources">

		<mkdir dir="${compile.dir}" />

		<javac srcdir="${java.dir}" destdir="${compile.dir}" debug="${compile.debug}" verbose="off" deprecation="${compile.deprecation}" optimize="${compile.optimize}">
			<classpath refid="compile.classpath" />
		</javac>

		<copy todir="${compile.dir}" overwrite="true">
			<fileset dir="${java.dir}" includes="**/*.xml,**/*.dtd, **/*.xsd" />
		</copy>

	</target>


	<!-- ================================================================================================= -->
	<target name="dist" depends="compile" description="Create binary distribution">

		<mkdir dir="${dist.dir}" />

		<delete file="${dist.dir}/iquiver.jar" failonerror="false" />
		<jar jarfile="${dist.dir}/iquiver.jar" basedir="${compile.dir}">
			<manifest>
				<attribute name="Purpose" value="${project.name}" />
				<attribute name="Version" value="0.1.1" />
			</manifest>
		</jar>

	</target>


	<!-- ================================================================================================= -->
	<target name="javadoc">
		<javadoc destdir="${javadoc.dir}" access="public" use="true" notree="false" nonavbar="false" noindex="false" splitindex="true" author="true" version="true" nodeprecatedlist="false" nodeprecated="false" packagenames="net.sf.iquiver.*" sourcepath="${java.dir}" classpath="${build.dir}" doctitle="${project.name}">
			<classpath refid="compile.classpath" />
		</javadoc>
	</target>


	<!-- ================================================================================================= -->
	<target name="generate_om" description="Creates the torque object model">
		<!-- Run the task 'om' of build-torque.xml with the appropriate settings -->
		<ant antfile="build-torque.xml" target="om" inheritAll="false" />
		<!-- Delete the report file -->
		<delete file="${java.dir}/report.${torque.project}.om.generation" />
	</target>


	<!-- ================================================================================================= -->
	<target name="id_table_init" description="Initializes the id-table for the torque id generator">
		<delete dir="src/sql" failonerror="false" />
		<ant antfile="build-torque.xml" target="id-table-init-sql" inheritAll="false" />
		<ant antfile="build-torque.xml" target="insert-sql" inheritAll="false" />
	</target>


	<!-- ================================================================================================= -->
	<target name="create_db" description="Creates the database from your schema.xml">
		<delete dir="src/sql" failonerror="false" />
		<ant antfile="build-torque.xml" target="sql" inheritAll="false" />
		<ant antfile="build-torque.xml" target="create-db" inheritAll="false" />
		<ant antfile="build-torque.xml" target="insert-sql" inheritAll="false" />
		<antcall target="id_table_init" />
		<delete>
			<fileset dir="${torque.sql.dir}" includes="**/*.sql **/*.generation" />
		</delete>
	</target>

	<!-- ================================================================================================= -->
	<target name="datadump_export" description="Creates a complete xml data dump of your database">
		<ant antfile="build-torque.xml" target="datadtd" inheritAll="false" />
		<ant antfile="build-torque.xml" target="datadump" inheritAll="false">
			<property name="outputDirectory" value="${torque.schema.dir}" />
		</ant>

		<move file="${torque.schema.dir}/${torque.project}-${torque.project}-all-data.xml" tofile="${torque.schema.dir}/${torque.project}-data.xml" />
	</target>


	<!-- ================================================================================================= -->
	<target name="datadump_import" description="Creates a complete xml data dump of your database">
		<ant antfile="build-torque.xml" target="datasql" inheritAll="false">
			<property name="outputDirectory" value="${torque.sql.dir}" />
		</ant>
		<ant antfile="build-torque.xml" target="insert-sql" inheritAll="false" />
	</target>


	<!-- ================================================================================================= -->
	<target name="generate_soap_skeleton" description="Creates SOAP stubs and skeletons for server and client">
		<java2wsdl bindingname="IQuiverSoapBinding" 
            classname="net.sf.iquiver.remote.soap.IWebService"
            location="http://localhost:8080/simpleservice/services/IQuiver"
            namespace="http://iquiver"
            output="${torque.schema.dir}/iquiver.wsdl"
            porttypename="IQuiver"
            stopclasses="java.*,javax.*,org.apache.torque.*">
			<!-- <mapping namespace="http://iquiver" package="net.sf.iquiver.remote.soap.impl" /> -->
            <mapping namespace="http://iquiver" package="net.sf.iquiver" />
            <!--
            <mapping namespace="http://iquiver.om" package="net.sf.iquiver.om" />
            <mapping namespace="http://iquiver.om.cache" package="net.sf.iquiver.om.cache" />
            <mapping namespace="http://iquiver.util.om" package="net.sf.iquiver.util.om" />
            <mapping namespace="http://iquiver.torque.om" package="org.apache.torque.om" />
            <mapping namespace="http://iquiver.torque.util" package="org.apache.torque.util" />            
            -->
		</java2wsdl>
        
		<ant target="awk" inheritAll="false">
			<property name="awk.scriptfile" value="src/awk/wsdl.awk" />
			<property name="awk.targetfile" value="${torque.schema.dir}/iquiver.wsdl" />
		</ant>
        
		<!--
        <package2path name="soapPackagePath" package="${remote.soap.pkg}.impl" />
		<echo message="Using path: ${soapPackagePath}" />
        -->

        <wsdl2java debug="false" 
            helperGen="false" 
            noimports="false" 
            output="src/tmp" 
            url="${torque.schema.dir}/iquiver.wsdl" 
            skeletondeploy="true"
            serverside="true"
            verbose="true">
	            <mapping namespace="http://iquiver-impl" package="${remote.soap.pkg}.impl"/>
	            <mapping namespace="http://iquiver-intf" package="${remote.soap.pkg}.impl"/>
	            <mapping namespace="http://iquiver" package="${remote.soap.pkg}.impl"/>
                <!--
                <mapping namespace="http://iquiver.om" package="${remote.soap.pkg}.impl.om" />
                <mapping namespace="http://iquiver.om.cache" package="${remote.soap.pkg}.impl.om.cache" />
                <mapping namespace="http://iquiver.util.om" package="${remote.soap.pkg}.impl.util.om" />
                <mapping namespace="http://iquiver.torque.om" package="${remote.soap.pkg}.impl.torque.om" />
                <mapping namespace="http://iquiver.torque.util" package="${remote.soap.pkg}.impl.torque.util" />            
                <mapping namespace="http://xml.apache.org/xml-soap" package="${remote.soap.pkg}.impl.xml_soap" />                                            
                -->
            </wsdl2java>

	</target>

	<!-- ================================================================================================= -->
	<target name="awk-direct" description="exec awk with direct script command">
		<!-- this target uses the following properties:
           awk.targetfile : the file which will be changed by this awk-task
           awk.script:      the script-command(s) (not the file)
   -->

		<!-- name of temporary files -->
		<property name="awk.tempfile.script" value="temp.awk" />

		<!-- creation of awk-script-file -->
		<echo message="${awk.script}" file="${awk.tempfile.script}" />

		<!-- execution of target "awk" -->
		<echo level="info" message="Script:" />
		<echo level="info" message="${awk.script}" />

		<ant target="awk" inheritAll="false">
			<property name="awk.scriptfile" value="${awk.tempfile.script}" />
		</ant>

		<!-- delete the temporary files -->
		<delete file="${awk.tempfile.script}" />
	</target>

	<!-- ================================================================================================= -->
	<target name="awk" description="exec awk">
		<!-- this target uses the following properties:
           awk.targetfile : the file which will be changed by this awk-task
           awk.scriptfile : the script-file
   -->

		<!-- name of temporary files -->
		<property name="awk.tempfile.out" value="temp_out.txt" />

		<!-- execution of awk-script-file -->
		<echo level="info" message="Running on: ${awk.targetfile} ..." />
		<echo level="info" message="Scriptfile: ${awk.scriptfile}" />
		<exec executable="gawk" output="${awk.tempfile.out}">
			<arg line="-f ${awk.scriptfile} ${awk.targetfile}" />
		</exec>

		<!-- copy the result of awk to the target file -->
		<copy file="${awk.tempfile.out}" tofile="${awk.targetfile}" overwrite="true" />

		<!-- delete the temporary files -->
		<delete file="${awk.tempfile.out}" />
	</target>

</project>